;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12-Jul-17 7:48:59 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x29B1      	GOTO       433
_interrupt:
0x0004	0x0870      	MOVF       R0, 0
0x0005	0x0020      	MOVLB      0
0x0006	0x00A1      	MOVWF      33
0x0007	0x0871      	MOVF       R1, 0
0x0008	0x00A0      	MOVWF      32
0x0009	0x018A      	CLRF       PCLATH
0x000A	0x0183      	CLRF       STATUS
;Controlador5A.c,211 :: 		void interrupt()
;Controlador5A.c,213 :: 		if(TMR1IF_bit)            //interrupcao pelo estouro do Timer1
0x000B	0x1C11      	BTFSS      TMR1IF_bit, 0
0x000C	0x2811      	GOTO       L_interrupt21
;Controlador5A.c,215 :: 		TMR1IF_bit = 0;          //Limpa a flag de interrupcao
0x000D	0x1011      	BCF        TMR1IF_bit, 0
;Controlador5A.c,216 :: 		n_interrupts_timer1++;   //incrementa a flag do overflow do timer1
0x000E	0x0AAB      	INCF       _n_interrupts_timer1, 1
0x000F	0x1903      	BTFSC      STATUS, 2
0x0010	0x0AAC      	INCF       _n_interrupts_timer1+1, 1
;Controlador5A.c,217 :: 		}
L_interrupt21:
;Controlador5A.c,219 :: 		if(CCP3IF_bit && CCP3CON.B0)            //Interrupcao do modulo CCP3 e modo de captura configurado para borda de subida?
0x0011	0x1E13      	BTFSS      CCP3IF_bit, 4
0x0012	0x2829      	GOTO       L_interrupt24
0x0013	0x0026      	MOVLB      6
0x0014	0x1C13      	BTFSS      CCP3CON, 0
0x0015	0x2829      	GOTO       L_interrupt24
L__interrupt37:
;Controlador5A.c,221 :: 		CCP3IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x0016	0x0020      	MOVLB      0
0x0017	0x1213      	BCF        CCP3IF_bit, 4
;Controlador5A.c,222 :: 		CCP3IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x0018	0x0021      	MOVLB      1
0x0019	0x1213      	BCF        CCP3IE_bit, 4
;Controlador5A.c,223 :: 		CCP3CON     = 0x04;                    //Configura captura por borda de descida
0x001A	0x3004      	MOVLW      4
0x001B	0x0026      	MOVLB      6
0x001C	0x0093      	MOVWF      CCP3CON
;Controlador5A.c,224 :: 		t1_sig1     = micros();                //Guarda o valor do timer1 da primeira captura.
0x001D	0x2198      	CALL       _micros
0x001E	0x0870      	MOVF       R0, 0
0x001F	0x00B1      	MOVWF      _t1_sig1
0x0020	0x0871      	MOVF       R1, 0
0x0021	0x00B2      	MOVWF      _t1_sig1+1
0x0022	0x0872      	MOVF       R2, 0
0x0023	0x00B3      	MOVWF      _t1_sig1+2
0x0024	0x0873      	MOVF       R3, 0
0x0025	0x00B4      	MOVWF      _t1_sig1+3
;Controlador5A.c,225 :: 		CCP3IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0026	0x0021      	MOVLB      1
0x0027	0x1613      	BSF        CCP3IE_bit, 4
;Controlador5A.c,226 :: 		} //end if
0x0028	0x284E      	GOTO       L_interrupt25
L_interrupt24:
;Controlador5A.c,227 :: 		else if(CCP3IF_bit)                     //Interrupcao do modulo CCP3?
0x0029	0x0020      	MOVLB      0
0x002A	0x1E13      	BTFSS      CCP3IF_bit, 4
0x002B	0x284E      	GOTO       L_interrupt26
;Controlador5A.c,229 :: 		CCP3IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x002C	0x1213      	BCF        CCP3IF_bit, 4
;Controlador5A.c,230 :: 		CCP3IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x002D	0x0021      	MOVLB      1
0x002E	0x1213      	BCF        CCP3IE_bit, 4
;Controlador5A.c,231 :: 		CCP3CON     = 0x05;                    //Configura captura por borda de subida
0x002F	0x3005      	MOVLW      5
0x0030	0x0026      	MOVLB      6
0x0031	0x0093      	MOVWF      CCP3CON
;Controlador5A.c,232 :: 		t2_sig1     = micros() - t1_sig1;      //Guarda o valor do timer1 da segunda captura.
0x0032	0x2198      	CALL       _micros
0x0033	0x0870      	MOVF       R0, 0
0x0034	0x00AD      	MOVWF      _t2_sig1
0x0035	0x0871      	MOVF       R1, 0
0x0036	0x00AE      	MOVWF      _t2_sig1+1
0x0037	0x0872      	MOVF       R2, 0
0x0038	0x00AF      	MOVWF      _t2_sig1+2
0x0039	0x0873      	MOVF       R3, 0
0x003A	0x00B0      	MOVWF      _t2_sig1+3
0x003B	0x0831      	MOVF       _t1_sig1, 0
0x003C	0x02AD      	SUBWF      _t2_sig1, 1
0x003D	0x0832      	MOVF       _t1_sig1+1, 0
0x003E	0x3BAE      	SUBWFB     _t2_sig1+1, 1
0x003F	0x0833      	MOVF       _t1_sig1+2, 0
0x0040	0x3BAF      	SUBWFB     _t2_sig1+2, 1
0x0041	0x0834      	MOVF       _t1_sig1+3, 0
0x0042	0x3BB0      	SUBWFB     _t2_sig1+3, 1
;Controlador5A.c,233 :: 		CCP3IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0043	0x0021      	MOVLB      1
0x0044	0x1613      	BSF        CCP3IE_bit, 4
;Controlador5A.c,234 :: 		last_measure = micros();               //guarda o tempo da ultima medida para o controle fail safe
0x0045	0x2198      	CALL       _micros
0x0046	0x0870      	MOVF       R0, 0
0x0047	0x00BD      	MOVWF      _last_measure
0x0048	0x0871      	MOVF       R1, 0
0x0049	0x00BE      	MOVWF      _last_measure+1
0x004A	0x0872      	MOVF       R2, 0
0x004B	0x00BF      	MOVWF      _last_measure+2
0x004C	0x0873      	MOVF       R3, 0
0x004D	0x00C0      	MOVWF      _last_measure+3
;Controlador5A.c,235 :: 		} //end else
L_interrupt26:
L_interrupt25:
0x004E	0x0020      	MOVLB      0
;Controlador5A.c,237 :: 		if(CCP4IF_bit && CCP4CON.B0)            //Interrupcao do modulo CCP4 e modo de captura configurado para borda de subida?
0x004F	0x1E93      	BTFSS      CCP4IF_bit, 5
0x0050	0x2867      	GOTO       L_interrupt29
0x0051	0x0026      	MOVLB      6
0x0052	0x1C1A      	BTFSS      CCP4CON, 0
0x0053	0x2867      	GOTO       L_interrupt29
L__interrupt36:
;Controlador5A.c,239 :: 		CCP4IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x0054	0x0020      	MOVLB      0
0x0055	0x1293      	BCF        CCP4IF_bit, 5
;Controlador5A.c,240 :: 		CCP4IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x0056	0x0021      	MOVLB      1
0x0057	0x1293      	BCF        CCP4IE_bit, 5
;Controlador5A.c,241 :: 		CCP4CON     = 0x04;                    //Configura captura por borda de descida
0x0058	0x3004      	MOVLW      4
0x0059	0x0026      	MOVLB      6
0x005A	0x009A      	MOVWF      CCP4CON
;Controlador5A.c,242 :: 		t1_sig2     = micros();                //Guarda o valor do timer1 da primeira captura.
0x005B	0x2198      	CALL       _micros
0x005C	0x0870      	MOVF       R0, 0
0x005D	0x00B9      	MOVWF      _t1_sig2
0x005E	0x0871      	MOVF       R1, 0
0x005F	0x00BA      	MOVWF      _t1_sig2+1
0x0060	0x0872      	MOVF       R2, 0
0x0061	0x00BB      	MOVWF      _t1_sig2+2
0x0062	0x0873      	MOVF       R3, 0
0x0063	0x00BC      	MOVWF      _t1_sig2+3
;Controlador5A.c,243 :: 		CCP4IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0064	0x0021      	MOVLB      1
0x0065	0x1693      	BSF        CCP4IE_bit, 5
;Controlador5A.c,244 :: 		} //end if
0x0066	0x288C      	GOTO       L_interrupt30
L_interrupt29:
;Controlador5A.c,245 :: 		else if(CCP4IF_bit)                     //Interrupcao do modulo CCP4?
0x0067	0x0020      	MOVLB      0
0x0068	0x1E93      	BTFSS      CCP4IF_bit, 5
0x0069	0x288C      	GOTO       L_interrupt31
;Controlador5A.c,247 :: 		CCP4IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x006A	0x1293      	BCF        CCP4IF_bit, 5
;Controlador5A.c,248 :: 		CCP4IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x006B	0x0021      	MOVLB      1
0x006C	0x1293      	BCF        CCP4IE_bit, 5
;Controlador5A.c,249 :: 		CCP4CON     = 0x05;                    //Configura captura por borda de subida
0x006D	0x3005      	MOVLW      5
0x006E	0x0026      	MOVLB      6
0x006F	0x009A      	MOVWF      CCP4CON
;Controlador5A.c,250 :: 		t2_sig2     = micros() - t1_sig2;      //Guarda o valor do timer1 da segunda captura.
0x0070	0x2198      	CALL       _micros
0x0071	0x0870      	MOVF       R0, 0
0x0072	0x00B5      	MOVWF      _t2_sig2
0x0073	0x0871      	MOVF       R1, 0
0x0074	0x00B6      	MOVWF      _t2_sig2+1
0x0075	0x0872      	MOVF       R2, 0
0x0076	0x00B7      	MOVWF      _t2_sig2+2
0x0077	0x0873      	MOVF       R3, 0
0x0078	0x00B8      	MOVWF      _t2_sig2+3
0x0079	0x0839      	MOVF       _t1_sig2, 0
0x007A	0x02B5      	SUBWF      _t2_sig2, 1
0x007B	0x083A      	MOVF       _t1_sig2+1, 0
0x007C	0x3BB6      	SUBWFB     _t2_sig2+1, 1
0x007D	0x083B      	MOVF       _t1_sig2+2, 0
0x007E	0x3BB7      	SUBWFB     _t2_sig2+2, 1
0x007F	0x083C      	MOVF       _t1_sig2+3, 0
0x0080	0x3BB8      	SUBWFB     _t2_sig2+3, 1
;Controlador5A.c,251 :: 		CCP4IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0081	0x0021      	MOVLB      1
0x0082	0x1693      	BSF        CCP4IE_bit, 5
;Controlador5A.c,252 :: 		last_measure = micros();               //guarda o tempo da ultima medida para o controle fail safe
0x0083	0x2198      	CALL       _micros
0x0084	0x0870      	MOVF       R0, 0
0x0085	0x00BD      	MOVWF      _last_measure
0x0086	0x0871      	MOVF       R1, 0
0x0087	0x00BE      	MOVWF      _last_measure+1
0x0088	0x0872      	MOVF       R2, 0
0x0089	0x00BF      	MOVWF      _last_measure+2
0x008A	0x0873      	MOVF       R3, 0
0x008B	0x00C0      	MOVWF      _last_measure+3
;Controlador5A.c,253 :: 		} //end else  */
L_interrupt31:
L_interrupt30:
;Controlador5A.c,254 :: 		} //end interrupt
L_end_interrupt:
L__interrupt62:
0x008C	0x0020      	MOVLB      0
0x008D	0x0821      	MOVF       33, 0
0x008E	0x00F0      	MOVWF      R0
0x008F	0x0820      	MOVF       32, 0
0x0090	0x00F1      	MOVWF      R1
0x0091	0x0009      	RETFIE     %s
; end of _interrupt
_UART1_Init:
;__Lib_UART_c45.c,12 :: 		
;__Lib_UART_c45.c,15 :: 		
0x0092	0x30FF      	MOVLW      _UART1_Write
0x0093	0x0020      	MOVLB      0
0x0094	0x00C5      	MOVWF      _UART_Wr_Ptr
0x0095	0x30FF      	MOVLW      hi_addr(_UART1_Write)
0x0096	0x00C6      	MOVWF      _UART_Wr_Ptr+1
0x0097	0x30FF      	MOVLW      FARG_UART1_Write_data_
0x0098	0x00C7      	MOVWF      _UART_Wr_Ptr+2
0x0099	0x30FF      	MOVLW      hi_addr(FARG_UART1_Write_data_)
0x009A	0x00C8      	MOVWF      _UART_Wr_Ptr+3
;__Lib_UART_c45.c,16 :: 		
0x009B	0x30FF      	MOVLW      _UART1_Read
0x009C	0x00C1      	MOVWF      _UART_Rd_Ptr
0x009D	0x30FF      	MOVLW      hi_addr(_UART1_Read)
0x009E	0x00C2      	MOVWF      _UART_Rd_Ptr+1
0x009F	0x3000      	MOVLW      0
0x00A0	0x00C3      	MOVWF      _UART_Rd_Ptr+2
0x00A1	0x3000      	MOVLW      0
0x00A2	0x00C4      	MOVWF      _UART_Rd_Ptr+3
;__Lib_UART_c45.c,17 :: 		
0x00A3	0x30FF      	MOVLW      _UART1_Data_Ready
0x00A4	0x00D1      	MOVWF      _UART_Rdy_Ptr
0x00A5	0x30FF      	MOVLW      hi_addr(_UART1_Data_Ready)
0x00A6	0x00D2      	MOVWF      _UART_Rdy_Ptr+1
0x00A7	0x3000      	MOVLW      0
0x00A8	0x00D3      	MOVWF      _UART_Rdy_Ptr+2
0x00A9	0x3000      	MOVLW      0
0x00AA	0x00D4      	MOVWF      _UART_Rdy_Ptr+3
;__Lib_UART_c45.c,18 :: 		
0x00AB	0x30FF      	MOVLW      _UART1_Tx_Idle
0x00AC	0x00CD      	MOVWF      _UART_Tx_Idle_Ptr
0x00AD	0x30FF      	MOVLW      hi_addr(_UART1_Tx_Idle)
0x00AE	0x00CE      	MOVWF      _UART_Tx_Idle_Ptr+1
0x00AF	0x3000      	MOVLW      0
0x00B0	0x00CF      	MOVWF      _UART_Tx_Idle_Ptr+2
0x00B1	0x3000      	MOVLW      0
0x00B2	0x00D0      	MOVWF      _UART_Tx_Idle_Ptr+3
;__Lib_UART_c45.c,20 :: 		
0x00B3	0x0023      	MOVLB      3
0x00B4	0x169E      	BSF        TXSTA, 5
;__Lib_UART_c45.c,21 :: 		
0x00B5	0x3090      	MOVLW      144
0x00B6	0x009D      	MOVWF      RCSTA
;__Lib_UART_c45.c,22 :: 		
0x00B7	0x0021      	MOVLB      1
0x00B8	0x168E      	BSF        TRISC5_bit, 5
;__Lib_UART_c45.c,23 :: 		
0x00B9	0x160E      	BSF        TRISC4_bit, 4
;__Lib_UART_c45.c,24 :: 		
L_UART1_Init0:
0x00BA	0x0020      	MOVLB      0
0x00BB	0x1E91      	BTFSS      PIR1, 5
0x00BC	0x28C1      	GOTO       L_UART1_Init1
;__Lib_UART_c45.c,25 :: 		
0x00BD	0x0023      	MOVLB      3
0x00BE	0x0819      	MOVF       RCREG, 0
0x00BF	0x00F0      	MOVWF      R0
0x00C0	0x28BA      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c45.c,26 :: 		
L_end_UART1_Init:
0x00C1	0x0008      	RETURN
; end of _UART1_Init
_ADC_Init:
;__Lib_ADC.c,19 :: 		
;__Lib_ADC.c,20 :: 		
0x00C2	0x30FF      	MOVLW      _ADC_Get_Sample
0x00C3	0x0020      	MOVLB      0
0x00C4	0x00C9      	MOVWF      _ADC_Get_Sample_Ptr
0x00C5	0x30FF      	MOVLW      hi_addr(_ADC_Get_Sample)
0x00C6	0x00CA      	MOVWF      _ADC_Get_Sample_Ptr+1
0x00C7	0x30FF      	MOVLW      FARG_ADC_Get_Sample_channel
0x00C8	0x00CB      	MOVWF      _ADC_Get_Sample_Ptr+2
0x00C9	0x30FF      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
0x00CA	0x00CC      	MOVWF      _ADC_Get_Sample_Ptr+3
;__Lib_ADC.c,21 :: 		
0x00CB	0x30F0      	MOVLW      240
0x00CC	0x0021      	MOVLB      1
0x00CD	0x009E      	MOVWF      ADCON1
;__Lib_ADC.c,22 :: 		
0x00CE	0x019D      	CLRF       ADCON0
;__Lib_ADC.c,23 :: 		
0x00CF	0x141D      	BSF        ADON_bit, 0
;__Lib_ADC.c,24 :: 		
L_end_ADC_Init:
0x00D0	0x0008      	RETURN
; end of _ADC_Init
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x00D1	0x0012      	MOVIW      0, 2
;__Lib_System.c,75 :: 		
0x00D2	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x00D3	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x00D4	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x00D5	0x28D1      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x00D6	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x00D7	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x00D8	0x28D1      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x00D9	0x0008      	RETURN
; end of ___CC2DW
_pwm_steering:
;Controlador5A.c,72 :: 		void pwm_steering(unsigned int channel,unsigned int port){
;Controlador5A.c,73 :: 		if(channel == 1){
0x00DA	0x3000      	MOVLW      0
0x00DB	0x0020      	MOVLB      0
0x00DC	0x0656      	XORWF      FARG_pwm_steering_channel+1, 0
0x00DD	0x1D03      	BTFSS      STATUS, 2
0x00DE	0x28E1      	GOTO       L__pwm_steering43
0x00DF	0x3001      	MOVLW      1
0x00E0	0x0655      	XORWF      FARG_pwm_steering_channel, 0
L__pwm_steering43:
0x00E1	0x1D03      	BTFSS      STATUS, 2
0x00E2	0x28FC      	GOTO       L_pwm_steering2
;Controlador5A.c,74 :: 		PSTR1CON.B0 = 0;   //1 = P1A pin is assigned to port pin
0x00E3	0x0025      	MOVLB      5
0x00E4	0x1016      	BCF        PSTR1CON, 0
;Controlador5A.c,75 :: 		PSTR1CON.B1 = 0;   //1 = P1B pin is assigned to port pin
0x00E5	0x1096      	BCF        PSTR1CON, 1
;Controlador5A.c,76 :: 		if(port == 1){
0x00E6	0x3000      	MOVLW      0
0x00E7	0x0020      	MOVLB      0
0x00E8	0x0658      	XORWF      FARG_pwm_steering_port+1, 0
0x00E9	0x1D03      	BTFSS      STATUS, 2
0x00EA	0x28ED      	GOTO       L__pwm_steering44
0x00EB	0x3001      	MOVLW      1
0x00EC	0x0657      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering44:
0x00ED	0x1D03      	BTFSS      STATUS, 2
0x00EE	0x28F1      	GOTO       L_pwm_steering3
;Controlador5A.c,77 :: 		PSTR1CON.B0 = 1; //1 = P1A pin has the PWM waveform
0x00EF	0x0025      	MOVLB      5
0x00F0	0x1416      	BSF        PSTR1CON, 0
;Controlador5A.c,78 :: 		}
L_pwm_steering3:
;Controlador5A.c,79 :: 		if(port == 2){
0x00F1	0x3000      	MOVLW      0
0x00F2	0x0020      	MOVLB      0
0x00F3	0x0658      	XORWF      FARG_pwm_steering_port+1, 0
0x00F4	0x1D03      	BTFSS      STATUS, 2
0x00F5	0x28F8      	GOTO       L__pwm_steering45
0x00F6	0x3002      	MOVLW      2
0x00F7	0x0657      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering45:
0x00F8	0x1D03      	BTFSS      STATUS, 2
0x00F9	0x28FC      	GOTO       L_pwm_steering4
;Controlador5A.c,80 :: 		PSTR1CON.B1 = 1; //1 = P1B pin has the PWM waveform
0x00FA	0x0025      	MOVLB      5
0x00FB	0x1496      	BSF        PSTR1CON, 1
;Controlador5A.c,81 :: 		}
L_pwm_steering4:
;Controlador5A.c,82 :: 		}//channel1 if
L_pwm_steering2:
;Controlador5A.c,83 :: 		if(channel == 2){
0x00FC	0x3000      	MOVLW      0
0x00FD	0x0020      	MOVLB      0
0x00FE	0x0656      	XORWF      FARG_pwm_steering_channel+1, 0
0x00FF	0x1D03      	BTFSS      STATUS, 2
0x0100	0x2903      	GOTO       L__pwm_steering46
0x0101	0x3002      	MOVLW      2
0x0102	0x0655      	XORWF      FARG_pwm_steering_channel, 0
L__pwm_steering46:
0x0103	0x1D03      	BTFSS      STATUS, 2
0x0104	0x291E      	GOTO       L_pwm_steering5
;Controlador5A.c,84 :: 		PSTR2CON.B0 = 0;   //1 = P2A pin is assigned to port pin
0x0105	0x0025      	MOVLB      5
0x0106	0x101D      	BCF        PSTR2CON, 0
;Controlador5A.c,85 :: 		PSTR2CON.B1 = 0;   //1 = P2B pin is assigned to port pin
0x0107	0x109D      	BCF        PSTR2CON, 1
;Controlador5A.c,86 :: 		if(port == 1){
0x0108	0x3000      	MOVLW      0
0x0109	0x0020      	MOVLB      0
0x010A	0x0658      	XORWF      FARG_pwm_steering_port+1, 0
0x010B	0x1D03      	BTFSS      STATUS, 2
0x010C	0x290F      	GOTO       L__pwm_steering47
0x010D	0x3001      	MOVLW      1
0x010E	0x0657      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering47:
0x010F	0x1D03      	BTFSS      STATUS, 2
0x0110	0x2913      	GOTO       L_pwm_steering6
;Controlador5A.c,87 :: 		PSTR2CON.B0 = 1; //1 = P2A pin has the PWM waveform
0x0111	0x0025      	MOVLB      5
0x0112	0x141D      	BSF        PSTR2CON, 0
;Controlador5A.c,88 :: 		}
L_pwm_steering6:
;Controlador5A.c,89 :: 		if(port == 2){
0x0113	0x3000      	MOVLW      0
0x0114	0x0020      	MOVLB      0
0x0115	0x0658      	XORWF      FARG_pwm_steering_port+1, 0
0x0116	0x1D03      	BTFSS      STATUS, 2
0x0117	0x291A      	GOTO       L__pwm_steering48
0x0118	0x3002      	MOVLW      2
0x0119	0x0657      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering48:
0x011A	0x1D03      	BTFSS      STATUS, 2
0x011B	0x291E      	GOTO       L_pwm_steering7
;Controlador5A.c,90 :: 		PSTR2CON.B1 = 1; //1 = P2B pin has the PWM waveform
0x011C	0x0025      	MOVLB      5
0x011D	0x149D      	BSF        PSTR2CON, 1
;Controlador5A.c,91 :: 		}
L_pwm_steering7:
;Controlador5A.c,92 :: 		}//channel2 if
L_pwm_steering5:
;Controlador5A.c,94 :: 		}
L_end_pwm_steering:
0x011E	0x0008      	RETURN
; end of _pwm_steering
_set_duty_cycle:
;Controlador5A.c,66 :: 		void set_duty_cycle(unsigned int channel, unsigned int duty ){ //funcao responsavel por setar o dutycicle nos PWMS, variando de 0 a 255
;Controlador5A.c,67 :: 		if(channel == 1)
0x011F	0x3000      	MOVLW      0
0x0120	0x0020      	MOVLB      0
0x0121	0x0656      	XORWF      FARG_set_duty_cycle_channel+1, 0
0x0122	0x1D03      	BTFSS      STATUS, 2
0x0123	0x2926      	GOTO       L__set_duty_cycle40
0x0124	0x3001      	MOVLW      1
0x0125	0x0655      	XORWF      FARG_set_duty_cycle_channel, 0
L__set_duty_cycle40:
0x0126	0x1D03      	BTFSS      STATUS, 2
0x0127	0x292B      	GOTO       L_set_duty_cycle0
;Controlador5A.c,68 :: 		CCPR1L = duty;
0x0128	0x0857      	MOVF       FARG_set_duty_cycle_duty, 0
0x0129	0x0025      	MOVLB      5
0x012A	0x0091      	MOVWF      CCPR1L
L_set_duty_cycle0:
;Controlador5A.c,69 :: 		if(channel == 2)
0x012B	0x3000      	MOVLW      0
0x012C	0x0020      	MOVLB      0
0x012D	0x0656      	XORWF      FARG_set_duty_cycle_channel+1, 0
0x012E	0x1D03      	BTFSS      STATUS, 2
0x012F	0x2932      	GOTO       L__set_duty_cycle41
0x0130	0x3002      	MOVLW      2
0x0131	0x0655      	XORWF      FARG_set_duty_cycle_channel, 0
L__set_duty_cycle41:
0x0132	0x1D03      	BTFSS      STATUS, 2
0x0133	0x2937      	GOTO       L_set_duty_cycle1
;Controlador5A.c,70 :: 		CCPR2L = duty;
0x0134	0x0857      	MOVF       FARG_set_duty_cycle_duty, 0
0x0135	0x0025      	MOVLB      5
0x0136	0x0098      	MOVWF      CCPR2L
L_set_duty_cycle1:
;Controlador5A.c,71 :: 		}
L_end_set_duty_cycle:
0x0137	0x0008      	RETURN
; end of _set_duty_cycle
_setup_port:
;Controlador5A.c,115 :: 		void setup_port(){
;Controlador5A.c,117 :: 		CM1CON0       = 0;
0x0138	0x0022      	MOVLB      2
0x0139	0x0191      	CLRF       CM1CON0
;Controlador5A.c,118 :: 		CM2CON0       = 0;
0x013A	0x0193      	CLRF       CM2CON0
;Controlador5A.c,121 :: 		RXDTSEL_bit = 1;     //RXDTSEL: RX/DT function is on RA1
0x013B	0x179D      	BSF        RXDTSEL_bit, 7
;Controlador5A.c,122 :: 		TXCKSEL_bit = 1;     //TXDTSEL: TX/CK function is on RA0
0x013C	0x151D      	BSF        TXCKSEL_bit, 2
;Controlador5A.c,123 :: 		UART1_Init(9600);    //Initialize UART module at 9600 bps      153600 = 9600*16
0x013D	0x0023      	MOVLB      3
0x013E	0x159F      	BSF        BAUDCON, 3
0x013F	0x30CF      	MOVLW      207
0x0140	0x009B      	MOVWF      SPBRG
0x0141	0x019C      	CLRF       SPBRG+1
0x0142	0x151E      	BSF        TXSTA, 2
0x0143	0x2092      	CALL       _UART1_Init
;Controlador5A.c,124 :: 		Delay_ms(100);       //Wait for UART module to stabilize
0x0144	0x3002      	MOVLW      2
0x0145	0x00FB      	MOVWF      R11
0x0146	0x3004      	MOVLW      4
0x0147	0x00FC      	MOVWF      R12
0x0148	0x30BA      	MOVLW      186
0x0149	0x00FD      	MOVWF      R13
L_setup_port8:
0x014A	0x0BFD      	DECFSZ     R13, 1
0x014B	0x294A      	GOTO       L_setup_port8
0x014C	0x0BFC      	DECFSZ     R12, 1
0x014D	0x294A      	GOTO       L_setup_port8
0x014E	0x0BFB      	DECFSZ     R11, 1
0x014F	0x294A      	GOTO       L_setup_port8
0x0150	0x0000      	NOP
;Controlador5A.c,127 :: 		P2BSEL_bit =  1;    //P2BSEL: 1 = P2B function is on RA4
0x0151	0x0022      	MOVLB      2
0x0152	0x149E      	BSF        P2BSEL_bit, 1
;Controlador5A.c,128 :: 		CCP2SEL_bit =  1;   //CCP2SEL:1 = CCP2/P2A function is on RA5
0x0153	0x141E      	BSF        CCP2SEL_bit, 0
;Controlador5A.c,130 :: 		ANSELA     = 0; //Nenhuma porta analogica
0x0154	0x0023      	MOVLB      3
0x0155	0x018C      	CLRF       ANSELA
;Controlador5A.c,131 :: 		ANSELC  = 0x01; //RC0 analogico AN4, ultimo bit do ANSELC.
0x0156	0x3001      	MOVLW      1
0x0157	0x008E      	MOVWF      ANSELC
;Controlador5A.c,132 :: 		ADC_Init();     // Initialize ADC module with default settings
0x0158	0x20C2      	CALL       _ADC_Init
;Controlador5A.c,138 :: 		TRISA2_bit = 1; //RADIO INPUT1(CCP3)
0x0159	0x150C      	BSF        TRISA2_bit, 2
;Controlador5A.c,139 :: 		TRISA3_bit = 1; //MLCR
0x015A	0x158C      	BSF        TRISA3_bit, 3
;Controlador5A.c,140 :: 		TRISA4_bit = 0; //PWM OUTPUT(P2B)
0x015B	0x120C      	BCF        TRISA4_bit, 4
;Controlador5A.c,141 :: 		TRISA5_bit = 0; //PWM OUTPUT(P2A)
0x015C	0x128C      	BCF        TRISA5_bit, 5
;Controlador5A.c,145 :: 		TRISC0_bit = 1; //AN4 (LOW BATTERY)
0x015D	0x140E      	BSF        TRISC0_bit, 0
;Controlador5A.c,146 :: 		TRISC1_bit = 1; //RADIO INPUT2(CCP4)
0x015E	0x148E      	BSF        TRISC1_bit, 1
;Controlador5A.c,147 :: 		TRISC2_bit = 1; //ERROR FLAG2
0x015F	0x150E      	BSF        TRISC2_bit, 2
;Controlador5A.c,148 :: 		TRISC3_bit = 1; //ERROR FLAG1
0x0160	0x158E      	BSF        TRISC3_bit, 3
;Controlador5A.c,149 :: 		TRISC4_bit = 0; //PWM OUTPUT(P1B)
0x0161	0x120E      	BCF        TRISC4_bit, 4
;Controlador5A.c,150 :: 		TRISC5_bit = 0; //PWM OUTPUT(P1A)
0x0162	0x128E      	BCF        TRISC5_bit, 5
;Controlador5A.c,154 :: 		GIE_bit    = 0X01;   //Habilita a interrupcao Global
0x0163	0x178B      	BSF        GIE_bit, 7
;Controlador5A.c,155 :: 		PEIE_bit   = 0X01;   //Habilita a interrupcao por perifericos
0x0164	0x170B      	BSF        PEIE_bit, 6
;Controlador5A.c,156 :: 		CCP3IE_bit  = 0x01;  //Habilita interrupcoes do modulo CCP3(RADIO INPUT1)
0x0165	0x1613      	BSF        CCP3IE_bit, 4
;Controlador5A.c,157 :: 		CCP4IE_bit  = 0x01;  //Habilita interrupcoes do modulo CCP4(RADIO INPUT2)
0x0166	0x1693      	BSF        CCP4IE_bit, 5
;Controlador5A.c,158 :: 		CCP3CON     = 0x05;  //Configura captura por borda de subida
0x0167	0x3005      	MOVLW      5
0x0168	0x0026      	MOVLB      6
0x0169	0x0093      	MOVWF      CCP3CON
;Controlador5A.c,159 :: 		CCP4CON     = 0x05;  //Configura captura por borda de subida
0x016A	0x3005      	MOVLW      5
0x016B	0x009A      	MOVWF      CCP4CON
;Controlador5A.c,161 :: 		}
L_end_setup_port:
0x016C	0x0008      	RETURN
; end of _setup_port
_setup_pwms:
;Controlador5A.c,19 :: 		void setup_pwms(){
;Controlador5A.c,20 :: 		T2CON = 0;   //desliga o Timer2, timer responsavel pelos PWMS
0x016D	0x0020      	MOVLB      0
0x016E	0x019C      	CLRF       T2CON
;Controlador5A.c,21 :: 		PR2 = 255;
0x016F	0x30FF      	MOVLW      255
0x0170	0x009B      	MOVWF      PR2
;Controlador5A.c,24 :: 		CCPTMRS.B1 = 0;    //00 = CCP1 is based off Timer2 in PWM mode
0x0171	0x0025      	MOVLB      5
0x0172	0x109E      	BCF        CCPTMRS, 1
;Controlador5A.c,25 :: 		CCPTMRS.B0 = 0;
0x0173	0x101E      	BCF        CCPTMRS, 0
;Controlador5A.c,28 :: 		PSTR1CON.B0 = 1;   //1 = P1A pin has the PWM waveform with polarity control from CCP1M<1:0>
0x0174	0x1416      	BSF        PSTR1CON, 0
;Controlador5A.c,29 :: 		PSTR1CON.B1 = 1;   //1 = P1B pin has the PWM waveform with polarity control from CCP1M<1:0>
0x0175	0x1496      	BSF        PSTR1CON, 1
;Controlador5A.c,30 :: 		PSTR1CON.B2 = 0;   //0 = P1C pin is assigned to port pin
0x0176	0x1116      	BCF        PSTR1CON, 2
;Controlador5A.c,31 :: 		PSTR1CON.B3 = 0;   //0 = P1D pin is assigned to port pin
0x0177	0x1196      	BCF        PSTR1CON, 3
;Controlador5A.c,32 :: 		PSTR1CON.B4 = 1;   //Steering Sync bit, 0 = Output steering update occurs at the beginning of the instruction cycle boundary
0x0178	0x1616      	BSF        PSTR1CON, 4
;Controlador5A.c,33 :: 		CCPR1L  = 0b11111111; //colocando nivel logico alto nas duas saidas para travar os motores
0x0179	0x30FF      	MOVLW      255
0x017A	0x0091      	MOVWF      CCPR1L
;Controlador5A.c,34 :: 		CCP1CON = 0b00111100; //see below:
0x017B	0x303C      	MOVLW      60
0x017C	0x0093      	MOVWF      CCP1CON
;Controlador5A.c,48 :: 		CCPTMRS.B3 = 0;    //00 = CCP2 is based off Timer2 in PWM mode
0x017D	0x119E      	BCF        CCPTMRS, 3
;Controlador5A.c,49 :: 		CCPTMRS.B2 = 0;
0x017E	0x111E      	BCF        CCPTMRS, 2
;Controlador5A.c,52 :: 		PSTR2CON.B0 = 1;   //1 = P1A pin has the PWM waveform with polarity control from CCP1M<1:0>
0x017F	0x141D      	BSF        PSTR2CON, 0
;Controlador5A.c,53 :: 		PSTR2CON.B1 = 1;   //1 = P1B pin has the PWM waveform with polarity control from CCP1M<1:0>
0x0180	0x149D      	BSF        PSTR2CON, 1
;Controlador5A.c,54 :: 		PSTR2CON.B2 = 0;   //0 = P1C pin is assigned to port pin
0x0181	0x111D      	BCF        PSTR2CON, 2
;Controlador5A.c,55 :: 		PSTR2CON.B3 = 0;   //0 = P1D pin is assigned to port pin
0x0182	0x119D      	BCF        PSTR2CON, 3
;Controlador5A.c,56 :: 		PSTR2CON.B4 = 1;   //Steering Sync bit, 0 = Output steering update occurs at the beginning of the instruction cycle boundary
0x0183	0x161D      	BSF        PSTR2CON, 4
;Controlador5A.c,57 :: 		CCPR2L  = 0b11111111;  //colocando nivel logico alto nas duas saidas para travar os motores
0x0184	0x30FF      	MOVLW      255
0x0185	0x0098      	MOVWF      CCPR2L
;Controlador5A.c,58 :: 		CCP2CON = 0b00111100; //Mesma configuracao do ECCP1
0x0186	0x303C      	MOVLW      60
0x0187	0x009A      	MOVWF      CCP2CON
;Controlador5A.c,59 :: 		T2CON = 0b00000100;  //pre scaler =  1
0x0188	0x3004      	MOVLW      4
0x0189	0x0020      	MOVLB      0
0x018A	0x009C      	MOVWF      T2CON
;Controlador5A.c,64 :: 		}
L_end_setup_pwms:
0x018B	0x0008      	RETURN
; end of _setup_pwms
_setup_Timer_1:
;Controlador5A.c,97 :: 		void setup_Timer_1(){
;Controlador5A.c,99 :: 		T1CKPS1_bit = 0x00;                        //Prescaller TMR1 1:2, cada bit do timer1 e correspondente a 1 us
0x018C	0x0020      	MOVLB      0
0x018D	0x1298      	BCF        T1CKPS1_bit, 5
;Controlador5A.c,100 :: 		T1CKPS0_bit = 0x01;                        //
0x018E	0x1618      	BSF        T1CKPS0_bit, 4
;Controlador5A.c,101 :: 		TMR1CS1_bit = 0x00;                        //Clock: Fosc/4 = instruction clock
0x018F	0x1398      	BCF        TMR1CS1_bit, 7
;Controlador5A.c,102 :: 		TMR1CS0_bit = 0x00;                        //Clock: Fosc/4 = instruction clock
0x0190	0x1318      	BCF        TMR1CS0_bit, 6
;Controlador5A.c,103 :: 		TMR1ON_bit  = 0x01;                        //Inicia a contagem do Timer1
0x0191	0x1418      	BSF        TMR1ON_bit, 0
;Controlador5A.c,104 :: 		TMR1IE_bit  = 0x01;                        //Habilita interrupcoes de TMR1
0x0192	0x0021      	MOVLB      1
0x0193	0x1411      	BSF        TMR1IE_bit, 0
;Controlador5A.c,105 :: 		TMR1L       = 0x00;                        //zera o Timer1
0x0194	0x0020      	MOVLB      0
0x0195	0x0196      	CLRF       TMR1L
;Controlador5A.c,106 :: 		TMR1H       = 0x00;
0x0196	0x0197      	CLRF       TMR1H
;Controlador5A.c,110 :: 		}
L_end_setup_Timer_1:
0x0197	0x0008      	RETURN
; end of _setup_Timer_1
_micros:
;Controlador5A.c,111 :: 		unsigned long long micros(){
;Controlador5A.c,112 :: 		return  (TMR1H <<8 | TMR1L)* TIMER1_CONST     //cada bit do timer 1 vale 1us
0x0198	0x0020      	MOVLB      0
0x0199	0x0817      	MOVF       TMR1H, 0
0x019A	0x00F1      	MOVWF      R1
0x019B	0x01F0      	CLRF       R0
0x019C	0x0816      	MOVF       TMR1L, 0
0x019D	0x0470      	IORWF       R0, 0
0x019E	0x00F5      	MOVWF      R5
0x019F	0x0871      	MOVF       R1, 0
0x01A0	0x00F6      	MOVWF      R6
0x01A1	0x3000      	MOVLW      0
0x01A2	0x04F6      	IORWF       R6, 1
;Controlador5A.c,113 :: 		+ n_interrupts_timer1*OVERFLOW_CONST; //numero de interrupcoes vezes o valor maximo do Timer 1 (2^16)
0x01A3	0x082C      	MOVF       _n_interrupts_timer1+1, 0
0x01A4	0x00F3      	MOVWF      R3
0x01A5	0x082B      	MOVF       _n_interrupts_timer1, 0
0x01A6	0x00F2      	MOVWF      R2
0x01A7	0x01F0      	CLRF       R0
0x01A8	0x01F1      	CLRF       R1
0x01A9	0x0875      	MOVF       R5, 0
0x01AA	0x07F0      	ADDWF      R0, 1
0x01AB	0x0876      	MOVF       R6, 0
0x01AC	0x3DF1      	ADDWFC     R1, 1
0x01AD	0x3000      	MOVLW      0
0x01AE	0x3DF2      	ADDWFC     R2, 1
0x01AF	0x3DF3      	ADDWFC     R3, 1
;Controlador5A.c,114 :: 		}
L_end_micros:
0x01B0	0x0008      	RETURN
; end of _micros
_main:
0x01B1	0x306D      	MOVLW      109
0x01B2	0x0020      	MOVLB      0
0x01B3	0x00A2      	MOVWF      ?lstr1_Controlador5A
0x01B4	0x3069      	MOVLW      105
0x01B5	0x00A3      	MOVWF      35
0x01B6	0x306B      	MOVLW      107
0x01B7	0x00A4      	MOVWF      36
0x01B8	0x3072      	MOVLW      114
0x01B9	0x00A5      	MOVWF      37
0x01BA	0x306F      	MOVLW      111
0x01BB	0x00A6      	MOVWF      38
0x01BC	0x3065      	MOVLW      101
0x01BD	0x00A7      	MOVWF      39
0x01BE	0x3020      	MOVLW      32
0x01BF	0x00A8      	MOVWF      40
0x01C0	0x300A      	MOVLW      10
0x01C1	0x00A9      	MOVWF      41
0x01C2	0x01AA      	CLRF       42
0x01C3	0x01AB      	CLRF       _n_interrupts_timer1
0x01C4	0x01AC      	CLRF       44
;Controlador5A.c,257 :: 		void main() {
;Controlador5A.c,258 :: 		OSCCON = 0b01110010; //Coloca o oscillador interno a 8Mz. NAO APAGAR ESSA LINHA (talvez muda-la pra dentro do setup_port)
0x01C5	0x3072      	MOVLW      114
0x01C6	0x0021      	MOVLB      1
0x01C7	0x0099      	MOVWF      OSCCON
;Controlador5A.c,259 :: 		setup_port();
0x01C8	0x2138      	CALL       _setup_port
;Controlador5A.c,260 :: 		setup_pwms();
0x01C9	0x216D      	CALL       _setup_pwms
;Controlador5A.c,261 :: 		setup_Timer_1();
0x01CA	0x218C      	CALL       _setup_Timer_1
;Controlador5A.c,263 :: 		pwm_steering(1,1);
0x01CB	0x3001      	MOVLW      1
0x01CC	0x00D5      	MOVWF      FARG_pwm_steering_channel
0x01CD	0x3000      	MOVLW      0
0x01CE	0x00D6      	MOVWF      FARG_pwm_steering_channel+1
0x01CF	0x3001      	MOVLW      1
0x01D0	0x00D7      	MOVWF      FARG_pwm_steering_port
0x01D1	0x3000      	MOVLW      0
0x01D2	0x00D8      	MOVWF      FARG_pwm_steering_port+1
0x01D3	0x20DA      	CALL       _pwm_steering
;Controlador5A.c,264 :: 		pwm_steering(2,1);
0x01D4	0x3002      	MOVLW      2
0x01D5	0x0020      	MOVLB      0
0x01D6	0x00D5      	MOVWF      FARG_pwm_steering_channel
0x01D7	0x3000      	MOVLW      0
0x01D8	0x00D6      	MOVWF      FARG_pwm_steering_channel+1
0x01D9	0x3001      	MOVLW      1
0x01DA	0x00D7      	MOVWF      FARG_pwm_steering_port
0x01DB	0x3000      	MOVLW      0
0x01DC	0x00D8      	MOVWF      FARG_pwm_steering_port+1
0x01DD	0x20DA      	CALL       _pwm_steering
;Controlador5A.c,265 :: 		set_duty_cycle(1, 127);
0x01DE	0x3001      	MOVLW      1
0x01DF	0x0020      	MOVLB      0
0x01E0	0x00D5      	MOVWF      FARG_set_duty_cycle_channel
0x01E1	0x3000      	MOVLW      0
0x01E2	0x00D6      	MOVWF      FARG_set_duty_cycle_channel+1
0x01E3	0x307F      	MOVLW      127
0x01E4	0x00D7      	MOVWF      FARG_set_duty_cycle_duty
0x01E5	0x3000      	MOVLW      0
0x01E6	0x00D8      	MOVWF      FARG_set_duty_cycle_duty+1
0x01E7	0x211F      	CALL       _set_duty_cycle
;Controlador5A.c,266 :: 		set_duty_cycle(2, 255);
0x01E8	0x3002      	MOVLW      2
0x01E9	0x0020      	MOVLB      0
0x01EA	0x00D5      	MOVWF      FARG_set_duty_cycle_channel
0x01EB	0x3000      	MOVLW      0
0x01EC	0x00D6      	MOVWF      FARG_set_duty_cycle_channel+1
0x01ED	0x30FF      	MOVLW      255
0x01EE	0x00D7      	MOVWF      FARG_set_duty_cycle_duty
0x01EF	0x01D8      	CLRF       FARG_set_duty_cycle_duty+1
0x01F0	0x211F      	CALL       _set_duty_cycle
;Controlador5A.c,267 :: 		while(1){
L_main32:
;Controlador5A.c,268 :: 		char *txt = "mikroe \n";
;Controlador5A.c,274 :: 		set_duty_cycle(2,0);
0x01F1	0x3002      	MOVLW      2
0x01F2	0x0020      	MOVLB      0
0x01F3	0x00D5      	MOVWF      FARG_set_duty_cycle_channel
0x01F4	0x3000      	MOVLW      0
0x01F5	0x00D6      	MOVWF      FARG_set_duty_cycle_channel+1
0x01F6	0x01D7      	CLRF       FARG_set_duty_cycle_duty
0x01F7	0x01D8      	CLRF       FARG_set_duty_cycle_duty+1
0x01F8	0x211F      	CALL       _set_duty_cycle
;Controlador5A.c,275 :: 		pwm_steering(2,1);
0x01F9	0x3002      	MOVLW      2
0x01FA	0x0020      	MOVLB      0
0x01FB	0x00D5      	MOVWF      FARG_pwm_steering_channel
0x01FC	0x3000      	MOVLW      0
0x01FD	0x00D6      	MOVWF      FARG_pwm_steering_channel+1
0x01FE	0x3001      	MOVLW      1
0x01FF	0x00D7      	MOVWF      FARG_pwm_steering_port
0x0200	0x3000      	MOVLW      0
0x0201	0x00D8      	MOVWF      FARG_pwm_steering_port+1
0x0202	0x20DA      	CALL       _pwm_steering
;Controlador5A.c,276 :: 		set_duty_cycle(2, 255);
0x0203	0x3002      	MOVLW      2
0x0204	0x0020      	MOVLB      0
0x0205	0x00D5      	MOVWF      FARG_set_duty_cycle_channel
0x0206	0x3000      	MOVLW      0
0x0207	0x00D6      	MOVWF      FARG_set_duty_cycle_channel+1
0x0208	0x30FF      	MOVLW      255
0x0209	0x00D7      	MOVWF      FARG_set_duty_cycle_duty
0x020A	0x01D8      	CLRF       FARG_set_duty_cycle_duty+1
0x020B	0x211F      	CALL       _set_duty_cycle
;Controlador5A.c,277 :: 		delay_ms(3000);
0x020C	0x301F      	MOVLW      31
0x020D	0x00FB      	MOVWF      R11
0x020E	0x3071      	MOVLW      113
0x020F	0x00FC      	MOVWF      R12
0x0210	0x301E      	MOVLW      30
0x0211	0x00FD      	MOVWF      R13
L_main34:
0x0212	0x0BFD      	DECFSZ     R13, 1
0x0213	0x2A12      	GOTO       L_main34
0x0214	0x0BFC      	DECFSZ     R12, 1
0x0215	0x2A12      	GOTO       L_main34
0x0216	0x0BFB      	DECFSZ     R11, 1
0x0217	0x2A12      	GOTO       L_main34
0x0218	0x0000      	NOP
;Controlador5A.c,279 :: 		set_duty_cycle(2,0);
0x0219	0x3002      	MOVLW      2
0x021A	0x0020      	MOVLB      0
0x021B	0x00D5      	MOVWF      FARG_set_duty_cycle_channel
0x021C	0x3000      	MOVLW      0
0x021D	0x00D6      	MOVWF      FARG_set_duty_cycle_channel+1
0x021E	0x01D7      	CLRF       FARG_set_duty_cycle_duty
0x021F	0x01D8      	CLRF       FARG_set_duty_cycle_duty+1
0x0220	0x211F      	CALL       _set_duty_cycle
;Controlador5A.c,280 :: 		pwm_steering(2,2);
0x0221	0x3002      	MOVLW      2
0x0222	0x0020      	MOVLB      0
0x0223	0x00D5      	MOVWF      FARG_pwm_steering_channel
0x0224	0x3000      	MOVLW      0
0x0225	0x00D6      	MOVWF      FARG_pwm_steering_channel+1
0x0226	0x3002      	MOVLW      2
0x0227	0x00D7      	MOVWF      FARG_pwm_steering_port
0x0228	0x3000      	MOVLW      0
0x0229	0x00D8      	MOVWF      FARG_pwm_steering_port+1
0x022A	0x20DA      	CALL       _pwm_steering
;Controlador5A.c,281 :: 		set_duty_cycle(2, 255);
0x022B	0x3002      	MOVLW      2
0x022C	0x0020      	MOVLB      0
0x022D	0x00D5      	MOVWF      FARG_set_duty_cycle_channel
0x022E	0x3000      	MOVLW      0
0x022F	0x00D6      	MOVWF      FARG_set_duty_cycle_channel+1
0x0230	0x30FF      	MOVLW      255
0x0231	0x00D7      	MOVWF      FARG_set_duty_cycle_duty
0x0232	0x01D8      	CLRF       FARG_set_duty_cycle_duty+1
0x0233	0x211F      	CALL       _set_duty_cycle
;Controlador5A.c,282 :: 		delay_ms(3000);
0x0234	0x301F      	MOVLW      31
0x0235	0x00FB      	MOVWF      R11
0x0236	0x3071      	MOVLW      113
0x0237	0x00FC      	MOVWF      R12
0x0238	0x301E      	MOVLW      30
0x0239	0x00FD      	MOVWF      R13
L_main35:
0x023A	0x0BFD      	DECFSZ     R13, 1
0x023B	0x2A3A      	GOTO       L_main35
0x023C	0x0BFC      	DECFSZ     R12, 1
0x023D	0x2A3A      	GOTO       L_main35
0x023E	0x0BFB      	DECFSZ     R11, 1
0x023F	0x2A3A      	GOTO       L_main35
0x0240	0x0000      	NOP
;Controlador5A.c,311 :: 		}
0x0241	0x29F1      	GOTO       L_main32
;Controlador5A.c,312 :: 		}
L_end_main:
0x0242	0x2A42      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [142]    _interrupt
0x0092      [48]    _UART1_Init
0x00C2      [15]    _ADC_Init
0x00D1       [9]    ___CC2DW
0x00DA      [69]    _pwm_steering
0x011F      [25]    _set_duty_cycle
0x0138      [53]    _setup_port
0x016D      [31]    _setup_pwms
0x018C      [12]    _setup_Timer_1
0x0198      [25]    _micros
0x01B1     [146]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [0]    PEIE_bit
0x000B       [0]    GIE_bit
0x0011       [1]    PIR1
0x0011       [0]    TMR1IF_bit
0x0013       [0]    CCP3IF_bit
0x0013       [0]    CCP4IF_bit
0x0016       [1]    TMR1L
0x0017       [1]    TMR1H
0x0018       [0]    T1CKPS1_bit
0x0018       [0]    T1CKPS0_bit
0x0018       [0]    TMR1CS1_bit
0x0018       [0]    TMR1CS0_bit
0x0018       [0]    TMR1ON_bit
0x001B       [1]    PR2
0x001C       [1]    T2CON
0x0022       [9]    ?lstr1_Controlador5A
0x002B       [2]    _n_interrupts_timer1
0x002D       [4]    _t2_sig1
0x0031       [4]    _t1_sig1
0x0035       [4]    _t2_sig2
0x0039       [4]    _t1_sig2
0x003D       [4]    _last_measure
0x0041       [4]    _UART_Rd_Ptr
0x0045       [4]    _UART_Wr_Ptr
0x0049       [4]    _ADC_Get_Sample_Ptr
0x004D       [4]    _UART_Tx_Idle_Ptr
0x0051       [4]    _UART_Rdy_Ptr
0x0055       [2]    FARG_set_duty_cycle_channel
0x0055       [2]    FARG_pwm_steering_channel
0x0057       [2]    FARG_set_duty_cycle_duty
0x0057       [2]    FARG_pwm_steering_port
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [0]    TRISA3_bit
0x008C       [0]    TRISA5_bit
0x008C       [0]    TRISA4_bit
0x008C       [0]    TRISA2_bit
0x008E       [0]    TRISC0_bit
0x008E       [0]    TRISC1_bit
0x008E       [0]    TRISC4_bit
0x008E       [0]    TRISC3_bit
0x008E       [0]    TRISC5_bit
0x008E       [0]    TRISC2_bit
0x0091       [0]    TMR1IE_bit
0x0093       [0]    CCP4IE_bit
0x0093       [0]    CCP3IE_bit
0x0099       [1]    OSCCON
0x009D       [0]    ADON_bit
0x009D       [1]    ADCON0
0x009E       [1]    ADCON1
0x0111       [1]    CM1CON0
0x0113       [1]    CM2CON0
0x011D       [0]    RXDTSEL_bit
0x011D       [0]    TXCKSEL_bit
0x011E       [0]    CCP2SEL_bit
0x011E       [0]    P2BSEL_bit
0x018C       [1]    ANSELA
0x018E       [1]    ANSELC
0x0199       [1]    RCREG
0x019B       [2]    SPBRG
0x019C       [1]    SPBRGH
0x019D       [1]    RCSTA
0x019E       [1]    TXSTA
0x019F       [1]    BAUDCON
0x0291       [1]    CCPR1L
0x0293       [1]    CCP1CON
0x0296       [1]    PSTR1CON
0x0298       [1]    CCPR2L
0x029A       [1]    CCP2CON
0x029D       [1]    PSTR2CON
0x029E       [1]    CCPTMRS
0x0313       [1]    CCP3CON
0x031A       [1]    CCP4CON
//** Label List: ** 
//----------------------------------------------
  L_set_duty_cycle0
  L_set_duty_cycle1
  L_pwm_steering2
  L_pwm_steering3
  L_pwm_steering4
  L_pwm_steering5
  L_pwm_steering6
  L_pwm_steering7
  L_setup_port8
  L_failSafeCheck9
  L_PulseIn110
  L_PulseIn111
  L_PulseIn112
  L_PulseIn113
  L_PulseIn114
  L_PulseIn115
  L_PulseIn116
  L_PulseIn117
  L_PulseIn118
  L_rotateMotor119
  L_rotateMotor120
  L_interrupt21
  L_interrupt22
  L_interrupt23
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_main32
  L_main33
  L_main34
  L_main35
  L__interrupt36
  L__interrupt37
  L_end_setup_pwms
  _setup_pwms
  L_end_set_duty_cycle
  _set_duty_cycle
  L__set_duty_cycle40
  L__set_duty_cycle41
  L_end_pwm_steering
  _pwm_steering
  L__pwm_steering43
  L__pwm_steering44
  L__pwm_steering45
  L__pwm_steering46
  L__pwm_steering47
  L__pwm_steering48
  L_end_setup_Timer_1
  _setup_Timer_1
  L_end_micros
  _micros
  L_end_setup_port
  _setup_port
  L_end_failSafeCheck
  _failSafeCheck
  L__failSafeCheck53
  L_end_PulseIn1
  _PulseIn1
  L__PulseIn155
  L__PulseIn156
  L__PulseIn157
  L_end_rotateMotor1
  _rotateMotor1
  L__rotateMotor159
  L__rotateMotor160
  L_end_interrupt
  _interrupt
  L__interrupt62
  L_end_main
  _main
  L_ADC_Get_Sample0
  L_ADC_Get_Sample1
  L_end_ADC_Init
  _ADC_Init
  L_end_ADC_Get_Sample
  _ADC_Get_Sample
  L_end_ADC_Read
  _ADC_Read
  L_CA2A_Loop
  L_CA2AW_Loop
  L_CS2S_Loop
  L_CS2S_End
  L_FZinS_Loop
  L_FZinS_End
  _CC2D_Loop1
  _CC2DL_Loop1
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2A
  ___CA2A
  L_end___CA2AW
  ___CA2AW
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_set_duty_cycle0
  L_set_duty_cycle1
  L_pwm_steering2
  L_pwm_steering3
  L_pwm_steering4
  L_pwm_steering5
  L_pwm_steering6
  L_pwm_steering7
  L_setup_port8
  L_failSafeCheck9
  L_PulseIn110
  L_PulseIn111
  L_PulseIn112
  L_PulseIn113
  L_PulseIn114
  L_PulseIn115
  L_PulseIn116
  L_PulseIn117
  L_PulseIn118
  L_rotateMotor119
  L_rotateMotor120
  L_interrupt21
  L_interrupt22
  L_interrupt23
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_main32
  L_main33
  L_main34
  L_main35
  L__interrupt36
  L__interrupt37
  L_end_setup_pwms
  _setup_pwms
  L_end_set_duty_cycle
  _set_duty_cycle
  L__set_duty_cycle40
  L__set_duty_cycle41
  L_end_pwm_steering
  _pwm_steering
  L__pwm_steering43
  L__pwm_steering44
  L__pwm_steering45
  L__pwm_steering46
  L__pwm_steering47
  L__pwm_steering48
  L_end_setup_Timer_1
  _setup_Timer_1
  L_end_micros
  _micros
  L_end_setup_port
  _setup_port
  L_end_failSafeCheck
  _failSafeCheck
  L__failSafeCheck53
  L_end_PulseIn1
  _PulseIn1
  L__PulseIn155
  L__PulseIn156
  L__PulseIn157
  L_end_rotateMotor1
  _rotateMotor1
  L__rotateMotor159
  L__rotateMotor160
  L_end_interrupt
  _interrupt
  L__interrupt62
  L_end_main
  _main
