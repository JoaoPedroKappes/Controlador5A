;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 21-Jul-17 7:13:00 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x2CDC      	GOTO       1244
_interrupt:
0x0004	0x0870      	MOVF       R0, 0
0x0005	0x0020      	MOVLB      0
0x0006	0x00A6      	MOVWF      38
0x0007	0x0871      	MOVF       R1, 0
0x0008	0x00A5      	MOVWF      37
0x0009	0x0872      	MOVF       R2, 0
0x000A	0x00A4      	MOVWF      36
0x000B	0x0873      	MOVF       R3, 0
0x000C	0x00A3      	MOVWF      35
0x000D	0x0874      	MOVF       R4, 0
0x000E	0x00A2      	MOVWF      34
0x000F	0x0875      	MOVF       R5, 0
0x0010	0x00A1      	MOVWF      33
0x0011	0x0876      	MOVF       R6, 0
0x0012	0x00A0      	MOVWF      32
0x0013	0x018A      	CLRF       PCLATH
0x0014	0x0183      	CLRF       STATUS
;Controlador5A.c,234 :: 		void interrupt()
;Controlador5A.c,236 :: 		if(TMR1IF_bit)            //interrupcao pelo estouro do Timer1
0x0015	0x1C11      	BTFSS      TMR1IF_bit, 0
0x0016	0x281B      	GOTO       L_interrupt21
;Controlador5A.c,238 :: 		TMR1IF_bit = 0;          //Limpa a flag de interrupcao
0x0017	0x1011      	BCF        TMR1IF_bit, 0
;Controlador5A.c,239 :: 		n_interrupts_timer1++;   //incrementa a flag do overflow do timer1
0x0018	0x0AE5      	INCF       _n_interrupts_timer1, 1
0x0019	0x1903      	BTFSC      STATUS, 2
0x001A	0x0AE6      	INCF       _n_interrupts_timer1+1, 1
;Controlador5A.c,240 :: 		}
L_interrupt21:
;Controlador5A.c,242 :: 		if(CCP3IF_bit && CCP3CON.B0)            //Interrupcao do modulo CCP3 e modo de captura configurado para borda de subida?
0x001B	0x1E13      	BTFSS      CCP3IF_bit, 4
0x001C	0x2833      	GOTO       L_interrupt24
0x001D	0x0026      	MOVLB      6
0x001E	0x1C13      	BTFSS      CCP3CON, 0
0x001F	0x2833      	GOTO       L_interrupt24
L__interrupt60:
;Controlador5A.c,244 :: 		CCP3IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x0020	0x0020      	MOVLB      0
0x0021	0x1213      	BCF        CCP3IF_bit, 4
;Controlador5A.c,245 :: 		CCP3IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x0022	0x0021      	MOVLB      1
0x0023	0x1213      	BCF        CCP3IE_bit, 4
;Controlador5A.c,246 :: 		CCP3CON     = 0x04;                    //Configura captura por borda de descida
0x0024	0x3004      	MOVLW      4
0x0025	0x0026      	MOVLB      6
0x0026	0x0093      	MOVWF      CCP3CON
;Controlador5A.c,247 :: 		t1_sig1     = micros();                //Guarda o valor do timer1 da primeira captura.
0x0027	0x2139      	CALL       _micros
0x0028	0x0870      	MOVF       R0, 0
0x0029	0x00E7      	MOVWF      _t1_sig1
0x002A	0x0871      	MOVF       R1, 0
0x002B	0x00E8      	MOVWF      _t1_sig1+1
0x002C	0x0872      	MOVF       R2, 0
0x002D	0x00E9      	MOVWF      _t1_sig1+2
0x002E	0x0873      	MOVF       R3, 0
0x002F	0x00EA      	MOVWF      _t1_sig1+3
;Controlador5A.c,248 :: 		CCP3IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0030	0x0021      	MOVLB      1
0x0031	0x1613      	BSF        CCP3IE_bit, 4
;Controlador5A.c,249 :: 		} //end if
0x0032	0x2860      	GOTO       L_interrupt25
L_interrupt24:
;Controlador5A.c,250 :: 		else if(CCP3IF_bit)                     //Interrupcao do modulo CCP3?
0x0033	0x0020      	MOVLB      0
0x0034	0x1E13      	BTFSS      CCP3IF_bit, 4
0x0035	0x2860      	GOTO       L_interrupt26
;Controlador5A.c,252 :: 		CCP3IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x0036	0x1213      	BCF        CCP3IF_bit, 4
;Controlador5A.c,253 :: 		CCP3IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x0037	0x0021      	MOVLB      1
0x0038	0x1213      	BCF        CCP3IE_bit, 4
;Controlador5A.c,254 :: 		CCP3CON     = 0x05;                    //Configura captura por borda de subida
0x0039	0x3005      	MOVLW      5
0x003A	0x0026      	MOVLB      6
0x003B	0x0093      	MOVWF      CCP3CON
;Controlador5A.c,255 :: 		t2_sig1     = micros() - t1_sig1;      //Guarda o valor do timer1 da segunda captura.
0x003C	0x2139      	CALL       _micros
0x003D	0x0870      	MOVF       R0, 0
0x003E	0x0021      	MOVLB      1
0x003F	0x00B0      	MOVWF      _t2_sig1
0x0040	0x0871      	MOVF       R1, 0
0x0041	0x00B1      	MOVWF      _t2_sig1+1
0x0042	0x0872      	MOVF       R2, 0
0x0043	0x00B2      	MOVWF      _t2_sig1+2
0x0044	0x0873      	MOVF       R3, 0
0x0045	0x00B3      	MOVWF      _t2_sig1+3
0x0046	0x0020      	MOVLB      0
0x0047	0x0867      	MOVF       _t1_sig1, 0
0x0048	0x0021      	MOVLB      1
0x0049	0x02B0      	SUBWF      _t2_sig1, 1
0x004A	0x0020      	MOVLB      0
0x004B	0x0868      	MOVF       _t1_sig1+1, 0
0x004C	0x0021      	MOVLB      1
0x004D	0x3BB1      	SUBWFB     _t2_sig1+1, 1
0x004E	0x0020      	MOVLB      0
0x004F	0x0869      	MOVF       _t1_sig1+2, 0
0x0050	0x0021      	MOVLB      1
0x0051	0x3BB2      	SUBWFB     _t2_sig1+2, 1
0x0052	0x0020      	MOVLB      0
0x0053	0x086A      	MOVF       _t1_sig1+3, 0
0x0054	0x0021      	MOVLB      1
0x0055	0x3BB3      	SUBWFB     _t2_sig1+3, 1
;Controlador5A.c,256 :: 		CCP3IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0056	0x1613      	BSF        CCP3IE_bit, 4
;Controlador5A.c,257 :: 		last_measure = micros();               //guarda o tempo da ultima medida para o controle fail safe
0x0057	0x2139      	CALL       _micros
0x0058	0x0870      	MOVF       R0, 0
0x0059	0x00EB      	MOVWF      _last_measure
0x005A	0x0871      	MOVF       R1, 0
0x005B	0x00EC      	MOVWF      _last_measure+1
0x005C	0x0872      	MOVF       R2, 0
0x005D	0x00ED      	MOVWF      _last_measure+2
0x005E	0x0873      	MOVF       R3, 0
0x005F	0x00EE      	MOVWF      _last_measure+3
;Controlador5A.c,258 :: 		} //end else
L_interrupt26:
L_interrupt25:
0x0060	0x0020      	MOVLB      0
;Controlador5A.c,260 :: 		if(CCP4IF_bit && CCP4CON.B0)            //Interrupcao do modulo CCP4 e modo de captura configurado para borda de subida?
0x0061	0x1E93      	BTFSS      CCP4IF_bit, 5
0x0062	0x2879      	GOTO       L_interrupt29
0x0063	0x0026      	MOVLB      6
0x0064	0x1C1A      	BTFSS      CCP4CON, 0
0x0065	0x2879      	GOTO       L_interrupt29
L__interrupt59:
;Controlador5A.c,262 :: 		CCP4IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x0066	0x0020      	MOVLB      0
0x0067	0x1293      	BCF        CCP4IF_bit, 5
;Controlador5A.c,263 :: 		CCP4IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x0068	0x0021      	MOVLB      1
0x0069	0x1293      	BCF        CCP4IE_bit, 5
;Controlador5A.c,264 :: 		CCP4CON     = 0x04;                    //Configura captura por borda de descida
0x006A	0x3004      	MOVLW      4
0x006B	0x0026      	MOVLB      6
0x006C	0x009A      	MOVWF      CCP4CON
;Controlador5A.c,265 :: 		t1_sig2     = micros();                //Guarda o valor do timer1 da primeira captura.
0x006D	0x2139      	CALL       _micros
0x006E	0x0870      	MOVF       R0, 0
0x006F	0x0021      	MOVLB      1
0x0070	0x00B4      	MOVWF      _t1_sig2
0x0071	0x0871      	MOVF       R1, 0
0x0072	0x00B5      	MOVWF      _t1_sig2+1
0x0073	0x0872      	MOVF       R2, 0
0x0074	0x00B6      	MOVWF      _t1_sig2+2
0x0075	0x0873      	MOVF       R3, 0
0x0076	0x00B7      	MOVWF      _t1_sig2+3
;Controlador5A.c,266 :: 		CCP4IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0077	0x1693      	BSF        CCP4IE_bit, 5
;Controlador5A.c,267 :: 		} //end if
0x0078	0x289E      	GOTO       L_interrupt30
L_interrupt29:
;Controlador5A.c,268 :: 		else if(CCP4IF_bit)                     //Interrupcao do modulo CCP4?
0x0079	0x0020      	MOVLB      0
0x007A	0x1E93      	BTFSS      CCP4IF_bit, 5
0x007B	0x289E      	GOTO       L_interrupt31
;Controlador5A.c,270 :: 		CCP4IF_bit  = 0x00;                    //Limpa a flag para nova captura
0x007C	0x1293      	BCF        CCP4IF_bit, 5
;Controlador5A.c,271 :: 		CCP4IE_bit  = 0x00;                    //Desabilita interrupcao do periferico CCP
0x007D	0x0021      	MOVLB      1
0x007E	0x1293      	BCF        CCP4IE_bit, 5
;Controlador5A.c,272 :: 		CCP4CON     = 0x05;                    //Configura captura por borda de subida
0x007F	0x3005      	MOVLW      5
0x0080	0x0026      	MOVLB      6
0x0081	0x009A      	MOVWF      CCP4CON
;Controlador5A.c,273 :: 		t2_sig2     = micros() - t1_sig2;      //Guarda o valor do timer1 da segunda captura.
0x0082	0x2139      	CALL       _micros
0x0083	0x0870      	MOVF       R0, 0
0x0084	0x0021      	MOVLB      1
0x0085	0x00AC      	MOVWF      _t2_sig2
0x0086	0x0871      	MOVF       R1, 0
0x0087	0x00AD      	MOVWF      _t2_sig2+1
0x0088	0x0872      	MOVF       R2, 0
0x0089	0x00AE      	MOVWF      _t2_sig2+2
0x008A	0x0873      	MOVF       R3, 0
0x008B	0x00AF      	MOVWF      _t2_sig2+3
0x008C	0x0834      	MOVF       _t1_sig2, 0
0x008D	0x02AC      	SUBWF      _t2_sig2, 1
0x008E	0x0835      	MOVF       _t1_sig2+1, 0
0x008F	0x3BAD      	SUBWFB     _t2_sig2+1, 1
0x0090	0x0836      	MOVF       _t1_sig2+2, 0
0x0091	0x3BAE      	SUBWFB     _t2_sig2+2, 1
0x0092	0x0837      	MOVF       _t1_sig2+3, 0
0x0093	0x3BAF      	SUBWFB     _t2_sig2+3, 1
;Controlador5A.c,274 :: 		CCP4IE_bit  = 0x01;                    //Habilita interrupcao do periferico CCP
0x0094	0x1693      	BSF        CCP4IE_bit, 5
;Controlador5A.c,275 :: 		last_measure = micros();               //guarda o tempo da ultima medida para o controle fail safe
0x0095	0x2139      	CALL       _micros
0x0096	0x0870      	MOVF       R0, 0
0x0097	0x00EB      	MOVWF      _last_measure
0x0098	0x0871      	MOVF       R1, 0
0x0099	0x00EC      	MOVWF      _last_measure+1
0x009A	0x0872      	MOVF       R2, 0
0x009B	0x00ED      	MOVWF      _last_measure+2
0x009C	0x0873      	MOVF       R3, 0
0x009D	0x00EE      	MOVWF      _last_measure+3
;Controlador5A.c,276 :: 		} //end else  */
L_interrupt31:
L_interrupt30:
;Controlador5A.c,277 :: 		} //end interrupt
L_end_interrupt:
L__interrupt86:
0x009E	0x0020      	MOVLB      0
0x009F	0x0826      	MOVF       38, 0
0x00A0	0x00F0      	MOVWF      R0
0x00A1	0x0825      	MOVF       37, 0
0x00A2	0x00F1      	MOVWF      R1
0x00A3	0x0824      	MOVF       36, 0
0x00A4	0x00F2      	MOVWF      R2
0x00A5	0x0823      	MOVF       35, 0
0x00A6	0x00F3      	MOVWF      R3
0x00A7	0x0822      	MOVF       34, 0
0x00A8	0x00F4      	MOVWF      R4
0x00A9	0x0821      	MOVF       33, 0
0x00AA	0x00F5      	MOVWF      R5
0x00AB	0x0820      	MOVF       32, 0
0x00AC	0x00F6      	MOVWF      R6
0x00AD	0x0009      	RETFIE     %s
; end of _interrupt
_Div_16x16_U:
;__Lib_Math.c,213 :: 		
;__Lib_Math.c,220 :: 		
0x00AE	0x0020      	MOVLB      0
;__Lib_Math.c,221 :: 		
0x00AF	0x01F8      	CLRF       R8
;__Lib_Math.c,222 :: 		
0x00B0	0x01F9      	CLRF       R9
;__Lib_Math.c,223 :: 		
0x00B1	0x3010      	MOVLW      16
;__Lib_Math.c,224 :: 		
0x00B2	0x00FC      	MOVWF      R12
;__Lib_Math.c,225 :: 		
0x00B3	0x0D71      	RLF        R1, 0
;__Lib_Math.c,226 :: 		
0x00B4	0x0DF8      	RLF        R8, 1
;__Lib_Math.c,227 :: 		
0x00B5	0x0DF9      	RLF        R9, 1
;__Lib_Math.c,228 :: 		
0x00B6	0x0874      	MOVF       R4, 0
;__Lib_Math.c,229 :: 		
0x00B7	0x02F8      	SUBWF      R8, 1
;__Lib_Math.c,230 :: 		
0x00B8	0x0875      	MOVF       R5, 0
;__Lib_Math.c,231 :: 		
0x00B9	0x1C03      	BTFSS      STATUS, 0
;__Lib_Math.c,232 :: 		
0x00BA	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,233 :: 		
0x00BB	0x02F9      	SUBWF      R9, 1
;__Lib_Math.c,234 :: 		
0x00BC	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,235 :: 		
0x00BD	0x28C5      	GOTO       $+8
;__Lib_Math.c,236 :: 		
0x00BE	0x0874      	MOVF       R4, 0
;__Lib_Math.c,237 :: 		
0x00BF	0x07F8      	ADDWF      R8, 1
;__Lib_Math.c,238 :: 		
0x00C0	0x0875      	MOVF       R5, 0
;__Lib_Math.c,239 :: 		
0x00C1	0x1803      	BTFSC      STATUS, 0
;__Lib_Math.c,240 :: 		
0x00C2	0x0F75      	INCFSZ     R5, 0
;__Lib_Math.c,241 :: 		
0x00C3	0x07F9      	ADDWF      R9, 1
;__Lib_Math.c,242 :: 		
0x00C4	0x1003      	BCF        STATUS, 0
;__Lib_Math.c,243 :: 		
0x00C5	0x0DF0      	RLF        R0, 1
;__Lib_Math.c,244 :: 		
0x00C6	0x0DF1      	RLF        R1, 1
;__Lib_Math.c,245 :: 		
0x00C7	0x0BFC      	DECFSZ     R12, 1
;__Lib_Math.c,246 :: 		
0x00C8	0x28B3      	GOTO       $-21
;__Lib_Math.c,248 :: 		
L_end_Div_16x16_U:
0x00C9	0x0008      	RETURN
; end of _Div_16x16_U
_UART1_Write:
;__Lib_UART_c45.c,54 :: 		
;__Lib_UART_c45.c,55 :: 		
L_UART1_Write3:
0x00CA	0x0023      	MOVLB      3
0x00CB	0x189E      	BTFSC      TXSTA, 1
0x00CC	0x28CF      	GOTO       L_UART1_Write4
;__Lib_UART_c45.c,56 :: 		
0x00CD	0x0000      	NOP
0x00CE	0x28CA      	GOTO       L_UART1_Write3
L_UART1_Write4:
;__Lib_UART_c45.c,57 :: 		
0x00CF	0x0021      	MOVLB      1
0x00D0	0x0862      	MOVF       FARG_UART1_Write_data_, 0
0x00D1	0x0023      	MOVLB      3
0x00D2	0x009A      	MOVWF      TXREG
;__Lib_UART_c45.c,58 :: 		
L_end_UART1_Write:
0x00D3	0x0008      	RETURN
; end of _UART1_Write
_EEPROM_Read:
;__Lib_EEPROM.c,1 :: 		
;__Lib_EEPROM.c,2 :: 		
0x00D4	0x0021      	MOVLB      1
0x00D5	0x085B      	MOVF       FARG_EEPROM_Read_Address, 0
0x00D6	0x0023      	MOVLB      3
0x00D7	0x0091      	MOVWF      EEADR
0x00D8	0x0192      	CLRF       EEADR+1
;__Lib_EEPROM.c,3 :: 		
0x00D9	0x1395      	BCF        EEPGD_bit, 7
;__Lib_EEPROM.c,4 :: 		
0x00DA	0x1315      	BCF        CFGS_bit, 6
;__Lib_EEPROM.c,5 :: 		
0x00DB	0x1415      	BSF        RD_bit, 0
;__Lib_EEPROM.c,6 :: 		
0x00DC	0x0813      	MOVF       EEDAT, 0
0x00DD	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,7 :: 		
L_end_EEPROM_Read:
0x00DE	0x0008      	RETURN
; end of _EEPROM_Read
_WordToStr:
;__Lib_Conversions.c,84 :: 		
;__Lib_Conversions.c,89 :: 		
0x00DF	0x0021      	MOVLB      1
0x00E0	0x01DF      	CLRF       WordToStr_len_L0
L_WordToStr6:
0x00E1	0x3005      	MOVLW      5
0x00E2	0x025F      	SUBWF      WordToStr_len_L0, 0
0x00E3	0x1803      	BTFSC      STATUS, 0
0x00E4	0x28EF      	GOTO       L_WordToStr7
;__Lib_Conversions.c,90 :: 		
0x00E5	0x085F      	MOVF       WordToStr_len_L0, 0
0x00E6	0x075D      	ADDWF      FARG_WordToStr_output, 0
0x00E7	0x0086      	MOVWF      FSR1
0x00E8	0x3000      	MOVLW      0
0x00E9	0x3D5E      	ADDWFC     FARG_WordToStr_output+1, 0
0x00EA	0x0087      	MOVWF      FSR1H
0x00EB	0x3020      	MOVLW      32
0x00EC	0x0081      	MOVWF      INDF1
;__Lib_Conversions.c,89 :: 		
0x00ED	0x0ADF      	INCF       WordToStr_len_L0, 1
;__Lib_Conversions.c,90 :: 		
0x00EE	0x28E1      	GOTO       L_WordToStr6
L_WordToStr7:
;__Lib_Conversions.c,91 :: 		
0x00EF	0x085F      	MOVF       WordToStr_len_L0, 0
0x00F0	0x075D      	ADDWF      FARG_WordToStr_output, 0
0x00F1	0x0086      	MOVWF      FSR1
0x00F2	0x3000      	MOVLW      0
0x00F3	0x3D5E      	ADDWFC     FARG_WordToStr_output+1, 0
0x00F4	0x0087      	MOVWF      FSR1H
0x00F5	0x0181      	CLRF       INDF1
0x00F6	0x03DF      	DECF       WordToStr_len_L0, 1
;__Lib_Conversions.c,93 :: 		
L_WordToStr9:
;__Lib_Conversions.c,94 :: 		
0x00F7	0x085F      	MOVF       WordToStr_len_L0, 0
0x00F8	0x075D      	ADDWF      FARG_WordToStr_output, 0
0x00F9	0x00E0      	MOVWF      FLOC__WordToStr
0x00FA	0x3000      	MOVLW      0
0x00FB	0x3D5E      	ADDWFC     FARG_WordToStr_output+1, 0
0x00FC	0x00E1      	MOVWF      FLOC__WordToStr+1
0x00FD	0x300A      	MOVLW      10
0x00FE	0x00F4      	MOVWF      R4
0x00FF	0x01F5      	CLRF       R5
0x0100	0x085B      	MOVF       FARG_WordToStr_input, 0
0x0101	0x00F0      	MOVWF      R0
0x0102	0x085C      	MOVF       FARG_WordToStr_input+1, 0
0x0103	0x00F1      	MOVWF      R1
0x0104	0x20AE      	CALL       _Div_16x16_U
0x0105	0x0878      	MOVF       R8, 0
0x0106	0x00F0      	MOVWF      R0
0x0107	0x0879      	MOVF       R9, 0
0x0108	0x00F1      	MOVWF      R1
0x0109	0x3030      	MOVLW      48
0x010A	0x07F0      	ADDWF      R0, 1
0x010B	0x0021      	MOVLB      1
0x010C	0x0860      	MOVF       FLOC__WordToStr, 0
0x010D	0x0086      	MOVWF      FSR1
0x010E	0x0861      	MOVF       FLOC__WordToStr+1, 0
0x010F	0x0087      	MOVWF      FSR1H
0x0110	0x0870      	MOVF       R0, 0
0x0111	0x0081      	MOVWF      INDF1
;__Lib_Conversions.c,95 :: 		
0x0112	0x300A      	MOVLW      10
0x0113	0x00F4      	MOVWF      R4
0x0114	0x01F5      	CLRF       R5
0x0115	0x085B      	MOVF       FARG_WordToStr_input, 0
0x0116	0x00F0      	MOVWF      R0
0x0117	0x085C      	MOVF       FARG_WordToStr_input+1, 0
0x0118	0x00F1      	MOVWF      R1
0x0119	0x20AE      	CALL       _Div_16x16_U
0x011A	0x0870      	MOVF       R0, 0
0x011B	0x0021      	MOVLB      1
0x011C	0x00DB      	MOVWF      FARG_WordToStr_input
0x011D	0x0871      	MOVF       R1, 0
0x011E	0x00DC      	MOVWF      FARG_WordToStr_input+1
;__Lib_Conversions.c,96 :: 		
0x011F	0x3000      	MOVLW      0
0x0120	0x0671      	XORWF      R1, 0
0x0121	0x1D03      	BTFSS      STATUS, 2
0x0122	0x2925      	GOTO       L__WordToStr109
0x0123	0x3000      	MOVLW      0
0x0124	0x0670      	XORWF      R0, 0
L__WordToStr109:
0x0125	0x1D03      	BTFSS      STATUS, 2
0x0126	0x2928      	GOTO       L_WordToStr11
;__Lib_Conversions.c,97 :: 		
0x0127	0x292A      	GOTO       L_WordToStr10
L_WordToStr11:
;__Lib_Conversions.c,98 :: 		
0x0128	0x03DF      	DECF       WordToStr_len_L0, 1
;__Lib_Conversions.c,99 :: 		
0x0129	0x28F7      	GOTO       L_WordToStr9
L_WordToStr10:
;__Lib_Conversions.c,100 :: 		
L_end_WordToStr:
0x012A	0x0008      	RETURN
; end of _WordToStr
_ADC_Init:
;__Lib_ADC.c,19 :: 		
;__Lib_ADC.c,20 :: 		
0x012B	0x30FF      	MOVLW      _ADC_Get_Sample
0x012C	0x0021      	MOVLB      1
0x012D	0x00C5      	MOVWF      _ADC_Get_Sample_Ptr
0x012E	0x30FF      	MOVLW      hi_addr(_ADC_Get_Sample)
0x012F	0x00C6      	MOVWF      _ADC_Get_Sample_Ptr+1
0x0130	0x30FF      	MOVLW      FARG_ADC_Get_Sample_channel
0x0131	0x00C7      	MOVWF      _ADC_Get_Sample_Ptr+2
0x0132	0x30FF      	MOVLW      hi_addr(FARG_ADC_Get_Sample_channel)
0x0133	0x00C8      	MOVWF      _ADC_Get_Sample_Ptr+3
;__Lib_ADC.c,21 :: 		
0x0134	0x30F0      	MOVLW      240
0x0135	0x009E      	MOVWF      ADCON1
;__Lib_ADC.c,22 :: 		
0x0136	0x019D      	CLRF       ADCON0
;__Lib_ADC.c,23 :: 		
0x0137	0x141D      	BSF        ADON_bit, 0
;__Lib_ADC.c,24 :: 		
L_end_ADC_Init:
0x0138	0x0008      	RETURN
; end of _ADC_Init
_micros:
;Controlador5A.c,127 :: 		unsigned long long micros(){
;Controlador5A.c,128 :: 		return  (TMR1H <<8 | TMR1L)* TIMER1_CONST     //cada bit do timer 1 vale 1us
0x0139	0x0020      	MOVLB      0
0x013A	0x0817      	MOVF       TMR1H, 0
0x013B	0x00F1      	MOVWF      R1
0x013C	0x01F0      	CLRF       R0
0x013D	0x0816      	MOVF       TMR1L, 0
0x013E	0x0470      	IORWF       R0, 0
0x013F	0x00F5      	MOVWF      R5
0x0140	0x0871      	MOVF       R1, 0
0x0141	0x00F6      	MOVWF      R6
0x0142	0x3000      	MOVLW      0
0x0143	0x04F6      	IORWF       R6, 1
;Controlador5A.c,129 :: 		+ n_interrupts_timer1*OVERFLOW_CONST; //numero de interrupcoes vezes o valor maximo do Timer 1 (2^16)
0x0144	0x0866      	MOVF       _n_interrupts_timer1+1, 0
0x0145	0x00F3      	MOVWF      R3
0x0146	0x0865      	MOVF       _n_interrupts_timer1, 0
0x0147	0x00F2      	MOVWF      R2
0x0148	0x01F0      	CLRF       R0
0x0149	0x01F1      	CLRF       R1
0x014A	0x0875      	MOVF       R5, 0
0x014B	0x07F0      	ADDWF      R0, 1
0x014C	0x0876      	MOVF       R6, 0
0x014D	0x3DF1      	ADDWFC     R1, 1
0x014E	0x3000      	MOVLW      0
0x014F	0x3DF2      	ADDWFC     R2, 1
0x0150	0x3DF3      	ADDWFC     R3, 1
;Controlador5A.c,130 :: 		}
L_end_micros:
0x0151	0x0008      	RETURN
; end of _micros
_error_led_blink:
;Controlador5A.c,279 :: 		void error_led_blink(unsigned time_ms){
;Controlador5A.c,281 :: 		time_ms = time_ms/250; //4 blinks por segundo
0x0152	0x30FA      	MOVLW      250
0x0153	0x00F4      	MOVWF      R4
0x0154	0x01F5      	CLRF       R5
0x0155	0x0021      	MOVLB      1
0x0156	0x085B      	MOVF       FARG_error_led_blink_time_ms, 0
0x0157	0x00F0      	MOVWF      R0
0x0158	0x085C      	MOVF       FARG_error_led_blink_time_ms+1, 0
0x0159	0x00F1      	MOVWF      R1
0x015A	0x20AE      	CALL       _Div_16x16_U
0x015B	0x0870      	MOVF       R0, 0
0x015C	0x0021      	MOVLB      1
0x015D	0x00DB      	MOVWF      FARG_error_led_blink_time_ms
0x015E	0x0871      	MOVF       R1, 0
0x015F	0x00DC      	MOVWF      FARG_error_led_blink_time_ms+1
;Controlador5A.c,282 :: 		for(i=0; i< time_ms; i++){
0x0160	0x01DD      	CLRF       error_led_blink_i_L0
0x0161	0x01DE      	CLRF       error_led_blink_i_L0+1
L_error_led_blink32:
0x0162	0x085C      	MOVF       FARG_error_led_blink_time_ms+1, 0
0x0163	0x025E      	SUBWF      error_led_blink_i_L0+1, 0
0x0164	0x1D03      	BTFSS      STATUS, 2
0x0165	0x2968      	GOTO       L__error_led_blink88
0x0166	0x085B      	MOVF       FARG_error_led_blink_time_ms, 0
0x0167	0x025D      	SUBWF      error_led_blink_i_L0, 0
L__error_led_blink88:
0x0168	0x1803      	BTFSC      STATUS, 0
0x0169	0x298A      	GOTO       L_error_led_blink33
;Controlador5A.c,283 :: 		ERROR_LED = 1;
0x016A	0x0020      	MOVLB      0
0x016B	0x148C      	BSF        RA1_bit, 1
;Controlador5A.c,284 :: 		delay_ms(200);
0x016C	0x3003      	MOVLW      3
0x016D	0x00FB      	MOVWF      R11
0x016E	0x3008      	MOVLW      8
0x016F	0x00FC      	MOVWF      R12
0x0170	0x3077      	MOVLW      119
0x0171	0x00FD      	MOVWF      R13
L_error_led_blink35:
0x0172	0x0BFD      	DECFSZ     R13, 1
0x0173	0x2972      	GOTO       L_error_led_blink35
0x0174	0x0BFC      	DECFSZ     R12, 1
0x0175	0x2972      	GOTO       L_error_led_blink35
0x0176	0x0BFB      	DECFSZ     R11, 1
0x0177	0x2972      	GOTO       L_error_led_blink35
;Controlador5A.c,285 :: 		ERROR_LED = 0;
0x0178	0x108C      	BCF        RA1_bit, 1
;Controlador5A.c,286 :: 		delay_ms(200);
0x0179	0x3003      	MOVLW      3
0x017A	0x00FB      	MOVWF      R11
0x017B	0x3008      	MOVLW      8
0x017C	0x00FC      	MOVWF      R12
0x017D	0x3077      	MOVLW      119
0x017E	0x00FD      	MOVWF      R13
L_error_led_blink36:
0x017F	0x0BFD      	DECFSZ     R13, 1
0x0180	0x297F      	GOTO       L_error_led_blink36
0x0181	0x0BFC      	DECFSZ     R12, 1
0x0182	0x297F      	GOTO       L_error_led_blink36
0x0183	0x0BFB      	DECFSZ     R11, 1
0x0184	0x297F      	GOTO       L_error_led_blink36
;Controlador5A.c,282 :: 		for(i=0; i< time_ms; i++){
0x0185	0x0021      	MOVLB      1
0x0186	0x0ADD      	INCF       error_led_blink_i_L0, 1
0x0187	0x1903      	BTFSC      STATUS, 2
0x0188	0x0ADE      	INCF       error_led_blink_i_L0+1, 1
;Controlador5A.c,287 :: 		}
0x0189	0x2962      	GOTO       L_error_led_blink32
L_error_led_blink33:
;Controlador5A.c,288 :: 		}
L_end_error_led_blink:
0x018A	0x0008      	RETURN
; end of _error_led_blink
_EEPROM_Write:
;__Lib_EEPROM.c,9 :: 		
;__Lib_EEPROM.c,12 :: 		
0x018B	0x0021      	MOVLB      1
0x018C	0x085B      	MOVF       FARG_EEPROM_Write_Address, 0
0x018D	0x0023      	MOVLB      3
0x018E	0x0091      	MOVWF      EEADR
0x018F	0x0192      	CLRF       EEADR+1
;__Lib_EEPROM.c,13 :: 		
0x0190	0x0021      	MOVLB      1
0x0191	0x085C      	MOVF       FARG_EEPROM_Write_data_, 0
0x0192	0x0023      	MOVLB      3
0x0193	0x0093      	MOVWF      EEDATL
;__Lib_EEPROM.c,14 :: 		
0x0194	0x1315      	BCF        CFGS_bit, 6
;__Lib_EEPROM.c,15 :: 		
0x0195	0x1395      	BCF        EEPGD_bit, 7
;__Lib_EEPROM.c,16 :: 		
0x0196	0x1515      	BSF        WREN_bit, 2
;__Lib_EEPROM.c,18 :: 		
0x0197	0x080B      	MOVF       INTCON, 0
0x0198	0x00F0      	MOVWF      R0
;__Lib_EEPROM.c,19 :: 		
0x0199	0x138B      	BCF        GIE_bit, 7
;__Lib_EEPROM.c,20 :: 		
0x019A	0x3055      	MOVLW      85
0x019B	0x0096      	MOVWF      EECON2
;__Lib_EEPROM.c,21 :: 		
0x019C	0x30AA      	MOVLW      170
0x019D	0x0096      	MOVWF      EECON2
;__Lib_EEPROM.c,22 :: 		
0x019E	0x1495      	BSF        WR_bit, 1
;__Lib_EEPROM.c,23 :: 		
0x019F	0x1BF0      	BTFSC      R0, 7
0x01A0	0x29A3      	GOTO       L__EEPROM_Write4
0x01A1	0x138B      	BCF        INTCON, 7
0x01A2	0x29A4      	GOTO       L__EEPROM_Write5
L__EEPROM_Write4:
0x01A3	0x178B      	BSF        INTCON, 7
L__EEPROM_Write5:
;__Lib_EEPROM.c,24 :: 		
0x01A4	0x1115      	BCF        WREN_bit, 2
;__Lib_EEPROM.c,25 :: 		
L_EEPROM_Write0:
0x01A5	0x1C95      	BTFSS      WR_bit, 1
0x01A6	0x29A8      	GOTO       L_EEPROM_Write1
;__Lib_EEPROM.c,26 :: 		
0x01A7	0x29A5      	GOTO       L_EEPROM_Write0
L_EEPROM_Write1:
;__Lib_EEPROM.c,28 :: 		
L_end_EEPROM_Write:
0x01A8	0x0008      	RETURN
; end of _EEPROM_Write
_UART1_Write_Text:
;__Lib_UART_c45.c,61 :: 		
;__Lib_UART_c45.c,62 :: 		
0x01A9	0x0021      	MOVLB      1
0x01AA	0x01DE      	CLRF       UART1_Write_Text_counter_L0
;__Lib_UART_c45.c,64 :: 		
0x01AB	0x085B      	MOVF       FARG_UART1_Write_Text_uart_text, 0
0x01AC	0x0084      	MOVWF      FSR0
0x01AD	0x085C      	MOVF       FARG_UART1_Write_Text_uart_text+1, 0
0x01AE	0x0085      	MOVWF      FSR0H
0x01AF	0x0800      	MOVF       INDF0, 0
0x01B0	0x00DD      	MOVWF      UART1_Write_Text_data__L0
;__Lib_UART_c45.c,65 :: 		
L_UART1_Write_Text5:
0x01B1	0x085D      	MOVF       UART1_Write_Text_data__L0, 0
0x01B2	0x3A00      	XORLW      0
0x01B3	0x1903      	BTFSC      STATUS, 2
0x01B4	0x29C3      	GOTO       L_UART1_Write_Text6
;__Lib_UART_c45.c,66 :: 		
0x01B5	0x085D      	MOVF       UART1_Write_Text_data__L0, 0
0x01B6	0x00E2      	MOVWF      FARG_UART1_Write_data_
0x01B7	0x20CA      	CALL       _UART1_Write
;__Lib_UART_c45.c,67 :: 		
0x01B8	0x0021      	MOVLB      1
0x01B9	0x0ADE      	INCF       UART1_Write_Text_counter_L0, 1
;__Lib_UART_c45.c,68 :: 		
0x01BA	0x085E      	MOVF       UART1_Write_Text_counter_L0, 0
0x01BB	0x075B      	ADDWF      FARG_UART1_Write_Text_uart_text, 0
0x01BC	0x0084      	MOVWF      FSR0
0x01BD	0x3000      	MOVLW      0
0x01BE	0x3D5C      	ADDWFC     FARG_UART1_Write_Text_uart_text+1, 0
0x01BF	0x0085      	MOVWF      FSR0H
0x01C0	0x0800      	MOVF       INDF0, 0
0x01C1	0x00DD      	MOVWF      UART1_Write_Text_data__L0
;__Lib_UART_c45.c,69 :: 		
0x01C2	0x29B1      	GOTO       L_UART1_Write_Text5
L_UART1_Write_Text6:
;__Lib_UART_c45.c,70 :: 		
L_end_UART1_Write_Text:
0x01C3	0x0008      	RETURN
; end of _UART1_Write_Text
_UART1_Init:
;__Lib_UART_c45.c,12 :: 		
;__Lib_UART_c45.c,15 :: 		
0x01C4	0x30CA      	MOVLW      _UART1_Write
0x01C5	0x0021      	MOVLB      1
0x01C6	0x00C9      	MOVWF      _UART_Wr_Ptr
0x01C7	0x3000      	MOVLW      hi_addr(_UART1_Write)
0x01C8	0x00CA      	MOVWF      _UART_Wr_Ptr+1
0x01C9	0x30E2      	MOVLW      FARG_UART1_Write_data_
0x01CA	0x00CB      	MOVWF      _UART_Wr_Ptr+2
0x01CB	0x3000      	MOVLW      hi_addr(FARG_UART1_Write_data_)
0x01CC	0x00CC      	MOVWF      _UART_Wr_Ptr+3
;__Lib_UART_c45.c,16 :: 		
0x01CD	0x30FF      	MOVLW      _UART1_Read
0x01CE	0x00BD      	MOVWF      _UART_Rd_Ptr
0x01CF	0x30FF      	MOVLW      hi_addr(_UART1_Read)
0x01D0	0x00BE      	MOVWF      _UART_Rd_Ptr+1
0x01D1	0x3000      	MOVLW      0
0x01D2	0x00BF      	MOVWF      _UART_Rd_Ptr+2
0x01D3	0x3000      	MOVLW      0
0x01D4	0x00C0      	MOVWF      _UART_Rd_Ptr+3
;__Lib_UART_c45.c,17 :: 		
0x01D5	0x30FF      	MOVLW      _UART1_Data_Ready
0x01D6	0x00B9      	MOVWF      _UART_Rdy_Ptr
0x01D7	0x30FF      	MOVLW      hi_addr(_UART1_Data_Ready)
0x01D8	0x00BA      	MOVWF      _UART_Rdy_Ptr+1
0x01D9	0x3000      	MOVLW      0
0x01DA	0x00BB      	MOVWF      _UART_Rdy_Ptr+2
0x01DB	0x3000      	MOVLW      0
0x01DC	0x00BC      	MOVWF      _UART_Rdy_Ptr+3
;__Lib_UART_c45.c,18 :: 		
0x01DD	0x30FF      	MOVLW      _UART1_Tx_Idle
0x01DE	0x00C1      	MOVWF      _UART_Tx_Idle_Ptr
0x01DF	0x30FF      	MOVLW      hi_addr(_UART1_Tx_Idle)
0x01E0	0x00C2      	MOVWF      _UART_Tx_Idle_Ptr+1
0x01E1	0x3000      	MOVLW      0
0x01E2	0x00C3      	MOVWF      _UART_Tx_Idle_Ptr+2
0x01E3	0x3000      	MOVLW      0
0x01E4	0x00C4      	MOVWF      _UART_Tx_Idle_Ptr+3
;__Lib_UART_c45.c,20 :: 		
0x01E5	0x0023      	MOVLB      3
0x01E6	0x169E      	BSF        TXSTA, 5
;__Lib_UART_c45.c,21 :: 		
0x01E7	0x3090      	MOVLW      144
0x01E8	0x009D      	MOVWF      RCSTA
;__Lib_UART_c45.c,22 :: 		
0x01E9	0x0021      	MOVLB      1
0x01EA	0x168E      	BSF        TRISC5_bit, 5
;__Lib_UART_c45.c,23 :: 		
0x01EB	0x160E      	BSF        TRISC4_bit, 4
;__Lib_UART_c45.c,24 :: 		
L_UART1_Init0:
0x01EC	0x0020      	MOVLB      0
0x01ED	0x1E91      	BTFSS      PIR1, 5
0x01EE	0x29F3      	GOTO       L_UART1_Init1
;__Lib_UART_c45.c,25 :: 		
0x01EF	0x0023      	MOVLB      3
0x01F0	0x0819      	MOVF       RCREG, 0
0x01F1	0x00F0      	MOVWF      R0
0x01F2	0x29EC      	GOTO       L_UART1_Init0
L_UART1_Init1:
;__Lib_UART_c45.c,26 :: 		
L_end_UART1_Init:
0x01F3	0x0008      	RETURN
; end of _UART1_Init
_read_eeprom_signals_data:
;Controlador5A.c,362 :: 		void read_eeprom_signals_data(){
;Controlador5A.c,366 :: 		UART1_write_text("LOW channel1: ");
0x01F4	0x3027      	MOVLW      ?lstr1_Controlador5A
0x01F5	0x0021      	MOVLB      1
0x01F6	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x01F7	0x3000      	MOVLW      hi_addr(?lstr1_Controlador5A)
0x01F8	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x01F9	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,367 :: 		lower_8bits = EEPROM_Read(0X00);
0x01FA	0x01DB      	CLRF       FARG_EEPROM_Read_Address
0x01FB	0x20D4      	CALL       _EEPROM_Read
0x01FC	0x0870      	MOVF       R0, 0
0x01FD	0x0020      	MOVLB      0
0x01FE	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,368 :: 		upper_8bits = EEPROM_Read(0X01);
0x01FF	0x3001      	MOVLW      1
0x0200	0x0021      	MOVLB      1
0x0201	0x00DB      	MOVWF      FARG_EEPROM_Read_Address
0x0202	0x20D4      	CALL       _EEPROM_Read
0x0203	0x0870      	MOVF       R0, 0
0x0204	0x0021      	MOVLB      1
0x0205	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,369 :: 		signal_value = (upper_8bits << 8) | lower_8bits;
0x0206	0x0870      	MOVF       R0, 0
0x0207	0x00DC      	MOVWF      FARG_WordToStr_input+1
0x0208	0x01DB      	CLRF       FARG_WordToStr_input
0x0209	0x0020      	MOVLB      0
0x020A	0x086F      	MOVF       _lower_8bits, 0
0x020B	0x0021      	MOVLB      1
0x020C	0x04DB      	IORWF       FARG_WordToStr_input, 1
0x020D	0x3000      	MOVLW      0
0x020E	0x04DC      	IORWF       FARG_WordToStr_input+1, 1
;Controlador5A.c,370 :: 		WordToStr(signal_value, buffer);
0x020F	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x0210	0x00DD      	MOVWF      FARG_WordToStr_output
0x0211	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x0212	0x00DE      	MOVWF      FARG_WordToStr_output+1
0x0213	0x20DF      	CALL       _WordToStr
;Controlador5A.c,371 :: 		UART1_write_text(buffer);
0x0214	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x0215	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x0216	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x0217	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x0218	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,372 :: 		UART1_write_text(" channel2: ");
0x0219	0x3038      	MOVLW      ?lstr2_Controlador5A
0x021A	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x021B	0x3000      	MOVLW      hi_addr(?lstr2_Controlador5A)
0x021C	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x021D	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,373 :: 		lower_8bits = EEPROM_Read(0X02);
0x021E	0x3002      	MOVLW      2
0x021F	0x00DB      	MOVWF      FARG_EEPROM_Read_Address
0x0220	0x20D4      	CALL       _EEPROM_Read
0x0221	0x0870      	MOVF       R0, 0
0x0222	0x0020      	MOVLB      0
0x0223	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,374 :: 		upper_8bits = EEPROM_Read(0X03);
0x0224	0x3003      	MOVLW      3
0x0225	0x0021      	MOVLB      1
0x0226	0x00DB      	MOVWF      FARG_EEPROM_Read_Address
0x0227	0x20D4      	CALL       _EEPROM_Read
0x0228	0x0870      	MOVF       R0, 0
0x0229	0x0021      	MOVLB      1
0x022A	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,375 :: 		signal_value = (upper_8bits << 8) | lower_8bits;
0x022B	0x0870      	MOVF       R0, 0
0x022C	0x00DC      	MOVWF      FARG_WordToStr_input+1
0x022D	0x01DB      	CLRF       FARG_WordToStr_input
0x022E	0x0020      	MOVLB      0
0x022F	0x086F      	MOVF       _lower_8bits, 0
0x0230	0x0021      	MOVLB      1
0x0231	0x04DB      	IORWF       FARG_WordToStr_input, 1
0x0232	0x3000      	MOVLW      0
0x0233	0x04DC      	IORWF       FARG_WordToStr_input+1, 1
;Controlador5A.c,376 :: 		WordToStr(signal_value, buffer);
0x0234	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x0235	0x00DD      	MOVWF      FARG_WordToStr_output
0x0236	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x0237	0x00DE      	MOVWF      FARG_WordToStr_output+1
0x0238	0x20DF      	CALL       _WordToStr
;Controlador5A.c,377 :: 		UART1_write_text(buffer);
0x0239	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x023A	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x023B	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x023C	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x023D	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,378 :: 		UART1_write_text("\t");
0x023E	0x3036      	MOVLW      ?lstr3_Controlador5A
0x023F	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x0240	0x3000      	MOVLW      hi_addr(?lstr3_Controlador5A)
0x0241	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x0242	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,379 :: 		delay_ms(10);
0x0243	0x301A      	MOVLW      26
0x0244	0x00FC      	MOVWF      R12
0x0245	0x30F8      	MOVLW      248
0x0246	0x00FD      	MOVWF      R13
L_read_eeprom_signals_data53:
0x0247	0x0BFD      	DECFSZ     R13, 1
0x0248	0x2A47      	GOTO       L_read_eeprom_signals_data53
0x0249	0x0BFC      	DECFSZ     R12, 1
0x024A	0x2A47      	GOTO       L_read_eeprom_signals_data53
0x024B	0x0000      	NOP
;Controlador5A.c,381 :: 		UART1_write_text("HIGH channel1: ");
0x024C	0x3044      	MOVLW      ?lstr4_Controlador5A
0x024D	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x024E	0x3000      	MOVLW      hi_addr(?lstr4_Controlador5A)
0x024F	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x0250	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,382 :: 		lower_8bits = EEPROM_Read(0X04);
0x0251	0x3004      	MOVLW      4
0x0252	0x00DB      	MOVWF      FARG_EEPROM_Read_Address
0x0253	0x20D4      	CALL       _EEPROM_Read
0x0254	0x0870      	MOVF       R0, 0
0x0255	0x0020      	MOVLB      0
0x0256	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,383 :: 		upper_8bits = EEPROM_Read(0X05);
0x0257	0x3005      	MOVLW      5
0x0258	0x0021      	MOVLB      1
0x0259	0x00DB      	MOVWF      FARG_EEPROM_Read_Address
0x025A	0x20D4      	CALL       _EEPROM_Read
0x025B	0x0870      	MOVF       R0, 0
0x025C	0x0021      	MOVLB      1
0x025D	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,384 :: 		signal_value = (upper_8bits << 8) | lower_8bits;
0x025E	0x0870      	MOVF       R0, 0
0x025F	0x00DC      	MOVWF      FARG_WordToStr_input+1
0x0260	0x01DB      	CLRF       FARG_WordToStr_input
0x0261	0x0020      	MOVLB      0
0x0262	0x086F      	MOVF       _lower_8bits, 0
0x0263	0x0021      	MOVLB      1
0x0264	0x04DB      	IORWF       FARG_WordToStr_input, 1
0x0265	0x3000      	MOVLW      0
0x0266	0x04DC      	IORWF       FARG_WordToStr_input+1, 1
;Controlador5A.c,385 :: 		WordToStr(signal_value, buffer);
0x0267	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x0268	0x00DD      	MOVWF      FARG_WordToStr_output
0x0269	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x026A	0x00DE      	MOVWF      FARG_WordToStr_output+1
0x026B	0x20DF      	CALL       _WordToStr
;Controlador5A.c,386 :: 		UART1_write_text(buffer);
0x026C	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x026D	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x026E	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x026F	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x0270	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,387 :: 		UART1_write_text(" channel2: ");
0x0271	0x30A0      	MOVLW      ?lstr5_Controlador5A
0x0272	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x0273	0x3000      	MOVLW      hi_addr(?lstr5_Controlador5A)
0x0274	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x0275	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,388 :: 		lower_8bits = EEPROM_Read(0X06);
0x0276	0x3006      	MOVLW      6
0x0277	0x00DB      	MOVWF      FARG_EEPROM_Read_Address
0x0278	0x20D4      	CALL       _EEPROM_Read
0x0279	0x0870      	MOVF       R0, 0
0x027A	0x0020      	MOVLB      0
0x027B	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,389 :: 		upper_8bits = EEPROM_Read(0X07);
0x027C	0x3007      	MOVLW      7
0x027D	0x0021      	MOVLB      1
0x027E	0x00DB      	MOVWF      FARG_EEPROM_Read_Address
0x027F	0x20D4      	CALL       _EEPROM_Read
0x0280	0x0870      	MOVF       R0, 0
0x0281	0x0021      	MOVLB      1
0x0282	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,390 :: 		signal_value = (upper_8bits << 8) | lower_8bits;
0x0283	0x0870      	MOVF       R0, 0
0x0284	0x00DC      	MOVWF      FARG_WordToStr_input+1
0x0285	0x01DB      	CLRF       FARG_WordToStr_input
0x0286	0x0020      	MOVLB      0
0x0287	0x086F      	MOVF       _lower_8bits, 0
0x0288	0x0021      	MOVLB      1
0x0289	0x04DB      	IORWF       FARG_WordToStr_input, 1
0x028A	0x3000      	MOVLW      0
0x028B	0x04DC      	IORWF       FARG_WordToStr_input+1, 1
;Controlador5A.c,391 :: 		WordToStr(signal_value, buffer);
0x028C	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x028D	0x00DD      	MOVWF      FARG_WordToStr_output
0x028E	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x028F	0x00DE      	MOVWF      FARG_WordToStr_output+1
0x0290	0x20DF      	CALL       _WordToStr
;Controlador5A.c,392 :: 		UART1_write_text(buffer);
0x0291	0x30CD      	MOVLW      read_eeprom_signals_data_buffer_L0
0x0292	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x0293	0x3000      	MOVLW      hi_addr(read_eeprom_signals_data_buffer_L0)
0x0294	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x0295	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,393 :: 		UART1_write_text("\n");
0x0296	0x3063      	MOVLW      ?lstr6_Controlador5A
0x0297	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x0298	0x3000      	MOVLW      hi_addr(?lstr6_Controlador5A)
0x0299	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x029A	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,394 :: 		delay_ms(10);
0x029B	0x301A      	MOVLW      26
0x029C	0x00FC      	MOVWF      R12
0x029D	0x30F8      	MOVLW      248
0x029E	0x00FD      	MOVWF      R13
L_read_eeprom_signals_data54:
0x029F	0x0BFD      	DECFSZ     R13, 1
0x02A0	0x2A9F      	GOTO       L_read_eeprom_signals_data54
0x02A1	0x0BFC      	DECFSZ     R12, 1
0x02A2	0x2A9F      	GOTO       L_read_eeprom_signals_data54
0x02A3	0x0000      	NOP
;Controlador5A.c,395 :: 		}
L_end_read_eeprom_signals_data:
0x02A4	0x0008      	RETURN
; end of _read_eeprom_signals_data
_calibration:
;Controlador5A.c,289 :: 		void calibration(){
;Controlador5A.c,297 :: 		signal1_L_value = 20000;                    //Tempo maximo, frequencia = 50 ... T=20ms
0x02A5	0x3020      	MOVLW      32
0x02A6	0x0021      	MOVLB      1
0x02A7	0x00D1      	MOVWF      calibration_signal1_L_value_L0
0x02A8	0x304E      	MOVLW      78
0x02A9	0x00D2      	MOVWF      calibration_signal1_L_value_L0+1
;Controlador5A.c,298 :: 		signal2_L_value = 20000;                    //Tempo maximo, frequencia = 50 ... T=20ms
0x02AA	0x3020      	MOVLW      32
0x02AB	0x00D3      	MOVWF      calibration_signal2_L_value_L0
0x02AC	0x304E      	MOVLW      78
0x02AD	0x00D4      	MOVWF      calibration_signal2_L_value_L0+1
;Controlador5A.c,299 :: 		signal1_H_value = 0;                        //Tempo minimo
0x02AE	0x01CD      	CLRF       calibration_signal1_H_value_L0
0x02AF	0x01CE      	CLRF       calibration_signal1_H_value_L0+1
;Controlador5A.c,300 :: 		signal2_H_value = 0;                        //Tempo minimo
0x02B0	0x01CF      	CLRF       calibration_signal2_H_value_L0
0x02B1	0x01D0      	CLRF       calibration_signal2_H_value_L0+1
;Controlador5A.c,301 :: 		time_control = micros();                    //controla o tempo de captura
0x02B2	0x2139      	CALL       _micros
0x02B3	0x0870      	MOVF       R0, 0
0x02B4	0x0021      	MOVLB      1
0x02B5	0x00D7      	MOVWF      calibration_time_control_L0
0x02B6	0x0871      	MOVF       R1, 0
0x02B7	0x00D8      	MOVWF      calibration_time_control_L0+1
0x02B8	0x0872      	MOVF       R2, 0
0x02B9	0x00D9      	MOVWF      calibration_time_control_L0+2
0x02BA	0x0873      	MOVF       R3, 0
0x02BB	0x00DA      	MOVWF      calibration_time_control_L0+3
;Controlador5A.c,302 :: 		ERROR_LED = 1;                              //indica a captura do pulso
0x02BC	0x0020      	MOVLB      0
0x02BD	0x148C      	BSF        RA1_bit, 1
;Controlador5A.c,304 :: 		while((micros() - time_control) < 2000000){
L_calibration37:
0x02BE	0x2139      	CALL       _micros
0x02BF	0x0870      	MOVF       R0, 0
0x02C0	0x00F4      	MOVWF      R4
0x02C1	0x0871      	MOVF       R1, 0
0x02C2	0x00F5      	MOVWF      R5
0x02C3	0x0872      	MOVF       R2, 0
0x02C4	0x00F6      	MOVWF      R6
0x02C5	0x0873      	MOVF       R3, 0
0x02C6	0x00F7      	MOVWF      R7
0x02C7	0x0021      	MOVLB      1
0x02C8	0x0857      	MOVF       calibration_time_control_L0, 0
0x02C9	0x02F4      	SUBWF      R4, 1
0x02CA	0x0858      	MOVF       calibration_time_control_L0+1, 0
0x02CB	0x3BF5      	SUBWFB     R5, 1
0x02CC	0x0859      	MOVF       calibration_time_control_L0+2, 0
0x02CD	0x3BF6      	SUBWFB     R6, 1
0x02CE	0x085A      	MOVF       calibration_time_control_L0+3, 0
0x02CF	0x3BF7      	SUBWFB     R7, 1
0x02D0	0x3000      	MOVLW      0
0x02D1	0x0277      	SUBWF      R7, 0
0x02D2	0x1D03      	BTFSS      STATUS, 2
0x02D3	0x2ADE      	GOTO       L__calibration90
0x02D4	0x301E      	MOVLW      30
0x02D5	0x0276      	SUBWF      R6, 0
0x02D6	0x1D03      	BTFSS      STATUS, 2
0x02D7	0x2ADE      	GOTO       L__calibration90
0x02D8	0x3084      	MOVLW      132
0x02D9	0x0275      	SUBWF      R5, 0
0x02DA	0x1D03      	BTFSS      STATUS, 2
0x02DB	0x2ADE      	GOTO       L__calibration90
0x02DC	0x3080      	MOVLW      128
0x02DD	0x0274      	SUBWF      R4, 0
L__calibration90:
0x02DE	0x1803      	BTFSC      STATUS, 0
0x02DF	0x2B02      	GOTO       L_calibration38
;Controlador5A.c,305 :: 		signal_T_value = (unsigned) t2_sig1;   //valor da largura do pulso do canal1
0x02E0	0x0021      	MOVLB      1
0x02E1	0x0830      	MOVF       _t2_sig1, 0
0x02E2	0x00D5      	MOVWF      calibration_signal_T_value_L0
0x02E3	0x0831      	MOVF       _t2_sig1+1, 0
0x02E4	0x00D6      	MOVWF      calibration_signal_T_value_L0+1
;Controlador5A.c,306 :: 		if(signal_T_value < signal1_L_value)
0x02E5	0x0852      	MOVF       calibration_signal1_L_value_L0+1, 0
0x02E6	0x0231      	SUBWF      _t2_sig1+1, 0
0x02E7	0x1D03      	BTFSS      STATUS, 2
0x02E8	0x2AEB      	GOTO       L__calibration91
0x02E9	0x0851      	MOVF       calibration_signal1_L_value_L0, 0
0x02EA	0x0230      	SUBWF      _t2_sig1, 0
L__calibration91:
0x02EB	0x1803      	BTFSC      STATUS, 0
0x02EC	0x2AF1      	GOTO       L_calibration39
;Controlador5A.c,307 :: 		signal1_L_value = signal_T_value;
0x02ED	0x0855      	MOVF       calibration_signal_T_value_L0, 0
0x02EE	0x00D1      	MOVWF      calibration_signal1_L_value_L0
0x02EF	0x0856      	MOVF       calibration_signal_T_value_L0+1, 0
0x02F0	0x00D2      	MOVWF      calibration_signal1_L_value_L0+1
L_calibration39:
;Controlador5A.c,309 :: 		signal_T_value = (unsigned) t2_sig2;   //valor da largura do pulso do canal2
0x02F1	0x082C      	MOVF       _t2_sig2, 0
0x02F2	0x00D5      	MOVWF      calibration_signal_T_value_L0
0x02F3	0x082D      	MOVF       _t2_sig2+1, 0
0x02F4	0x00D6      	MOVWF      calibration_signal_T_value_L0+1
;Controlador5A.c,310 :: 		if(signal_T_value < signal2_L_value)
0x02F5	0x0854      	MOVF       calibration_signal2_L_value_L0+1, 0
0x02F6	0x022D      	SUBWF      _t2_sig2+1, 0
0x02F7	0x1D03      	BTFSS      STATUS, 2
0x02F8	0x2AFB      	GOTO       L__calibration92
0x02F9	0x0853      	MOVF       calibration_signal2_L_value_L0, 0
0x02FA	0x022C      	SUBWF      _t2_sig2, 0
L__calibration92:
0x02FB	0x1803      	BTFSC      STATUS, 0
0x02FC	0x2B01      	GOTO       L_calibration40
;Controlador5A.c,311 :: 		signal2_L_value = signal_T_value;
0x02FD	0x0855      	MOVF       calibration_signal_T_value_L0, 0
0x02FE	0x00D3      	MOVWF      calibration_signal2_L_value_L0
0x02FF	0x0856      	MOVF       calibration_signal_T_value_L0+1, 0
0x0300	0x00D4      	MOVWF      calibration_signal2_L_value_L0+1
L_calibration40:
;Controlador5A.c,312 :: 		}
0x0301	0x2ABE      	GOTO       L_calibration37
L_calibration38:
0x0302	0x0021      	MOVLB      1
;Controlador5A.c,316 :: 		lower_8bits = signal1_L_value & 0xff;        //seleciona os 8 bits menos significativos
0x0303	0x30FF      	MOVLW      255
0x0304	0x0551      	ANDWF      calibration_signal1_L_value_L0, 0
0x0305	0x00F3      	MOVWF      R3
0x0306	0x0873      	MOVF       R3, 0
0x0307	0x0020      	MOVLB      0
0x0308	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,317 :: 		upper_8bits = (signal1_L_value >> 8) & 0xff; //seleciona os 8 bits mais significativos
0x0309	0x0021      	MOVLB      1
0x030A	0x0852      	MOVF       calibration_signal1_L_value_L0+1, 0
0x030B	0x00F0      	MOVWF      R0
0x030C	0x01F1      	CLRF       R1
0x030D	0x30FF      	MOVLW      255
0x030E	0x0570      	ANDWF      R0, 0
0x030F	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,318 :: 		EEPROM_Write(0X00,lower_8bits);
0x0310	0x01DB      	CLRF       FARG_EEPROM_Write_Address
0x0311	0x0873      	MOVF       R3, 0
0x0312	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x0313	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,319 :: 		delay_ms(10);
0x0314	0x301A      	MOVLW      26
0x0315	0x00FC      	MOVWF      R12
0x0316	0x30F8      	MOVLW      248
0x0317	0x00FD      	MOVWF      R13
L_calibration41:
0x0318	0x0BFD      	DECFSZ     R13, 1
0x0319	0x2B18      	GOTO       L_calibration41
0x031A	0x0BFC      	DECFSZ     R12, 1
0x031B	0x2B18      	GOTO       L_calibration41
0x031C	0x0000      	NOP
;Controlador5A.c,320 :: 		EEPROM_Write(0X01,upper_8bits);
0x031D	0x3001      	MOVLW      1
0x031E	0x0021      	MOVLB      1
0x031F	0x00DB      	MOVWF      FARG_EEPROM_Write_Address
0x0320	0x0838      	MOVF       _upper_8bits, 0
0x0321	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x0322	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,321 :: 		delay_ms(10);
0x0323	0x301A      	MOVLW      26
0x0324	0x00FC      	MOVWF      R12
0x0325	0x30F8      	MOVLW      248
0x0326	0x00FD      	MOVWF      R13
L_calibration42:
0x0327	0x0BFD      	DECFSZ     R13, 1
0x0328	0x2B27      	GOTO       L_calibration42
0x0329	0x0BFC      	DECFSZ     R12, 1
0x032A	0x2B27      	GOTO       L_calibration42
0x032B	0x0000      	NOP
;Controlador5A.c,324 :: 		lower_8bits = signal2_L_value & 0xff;        //seleciona os 8 bits menos significativos
0x032C	0x30FF      	MOVLW      255
0x032D	0x0021      	MOVLB      1
0x032E	0x0553      	ANDWF      calibration_signal2_L_value_L0, 0
0x032F	0x00F3      	MOVWF      R3
0x0330	0x0873      	MOVF       R3, 0
0x0331	0x0020      	MOVLB      0
0x0332	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,325 :: 		upper_8bits = (signal2_L_value >> 8) & 0xff; //seleciona os 8 bits mais significativos
0x0333	0x0021      	MOVLB      1
0x0334	0x0854      	MOVF       calibration_signal2_L_value_L0+1, 0
0x0335	0x00F0      	MOVWF      R0
0x0336	0x01F1      	CLRF       R1
0x0337	0x30FF      	MOVLW      255
0x0338	0x0570      	ANDWF      R0, 0
0x0339	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,326 :: 		EEPROM_Write(0X02,lower_8bits);
0x033A	0x3002      	MOVLW      2
0x033B	0x00DB      	MOVWF      FARG_EEPROM_Write_Address
0x033C	0x0873      	MOVF       R3, 0
0x033D	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x033E	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,327 :: 		delay_ms(10);
0x033F	0x301A      	MOVLW      26
0x0340	0x00FC      	MOVWF      R12
0x0341	0x30F8      	MOVLW      248
0x0342	0x00FD      	MOVWF      R13
L_calibration43:
0x0343	0x0BFD      	DECFSZ     R13, 1
0x0344	0x2B43      	GOTO       L_calibration43
0x0345	0x0BFC      	DECFSZ     R12, 1
0x0346	0x2B43      	GOTO       L_calibration43
0x0347	0x0000      	NOP
;Controlador5A.c,328 :: 		EEPROM_Write(0X03,upper_8bits);
0x0348	0x3003      	MOVLW      3
0x0349	0x0021      	MOVLB      1
0x034A	0x00DB      	MOVWF      FARG_EEPROM_Write_Address
0x034B	0x0838      	MOVF       _upper_8bits, 0
0x034C	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x034D	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,329 :: 		delay_ms(10);
0x034E	0x301A      	MOVLW      26
0x034F	0x00FC      	MOVWF      R12
0x0350	0x30F8      	MOVLW      248
0x0351	0x00FD      	MOVWF      R13
L_calibration44:
0x0352	0x0BFD      	DECFSZ     R13, 1
0x0353	0x2B52      	GOTO       L_calibration44
0x0354	0x0BFC      	DECFSZ     R12, 1
0x0355	0x2B52      	GOTO       L_calibration44
0x0356	0x0000      	NOP
;Controlador5A.c,331 :: 		error_led_blink(1600);                      //indica a captura do valor minimo
0x0357	0x3040      	MOVLW      64
0x0358	0x0021      	MOVLB      1
0x0359	0x00DB      	MOVWF      FARG_error_led_blink_time_ms
0x035A	0x3006      	MOVLW      6
0x035B	0x00DC      	MOVWF      FARG_error_led_blink_time_ms+1
0x035C	0x2152      	CALL       _error_led_blink
;Controlador5A.c,332 :: 		time_control = micros();                    //controla o tempo de captura
0x035D	0x2139      	CALL       _micros
0x035E	0x0870      	MOVF       R0, 0
0x035F	0x0021      	MOVLB      1
0x0360	0x00D7      	MOVWF      calibration_time_control_L0
0x0361	0x0871      	MOVF       R1, 0
0x0362	0x00D8      	MOVWF      calibration_time_control_L0+1
0x0363	0x0872      	MOVF       R2, 0
0x0364	0x00D9      	MOVWF      calibration_time_control_L0+2
0x0365	0x0873      	MOVF       R3, 0
0x0366	0x00DA      	MOVWF      calibration_time_control_L0+3
;Controlador5A.c,333 :: 		ERROR_LED = 1;                              //indica a captura do pulso
0x0367	0x0020      	MOVLB      0
0x0368	0x148C      	BSF        RA1_bit, 1
;Controlador5A.c,334 :: 		while((micros() - time_control) < 2000000){
L_calibration45:
0x0369	0x2139      	CALL       _micros
0x036A	0x0870      	MOVF       R0, 0
0x036B	0x00F4      	MOVWF      R4
0x036C	0x0871      	MOVF       R1, 0
0x036D	0x00F5      	MOVWF      R5
0x036E	0x0872      	MOVF       R2, 0
0x036F	0x00F6      	MOVWF      R6
0x0370	0x0873      	MOVF       R3, 0
0x0371	0x00F7      	MOVWF      R7
0x0372	0x0021      	MOVLB      1
0x0373	0x0857      	MOVF       calibration_time_control_L0, 0
0x0374	0x02F4      	SUBWF      R4, 1
0x0375	0x0858      	MOVF       calibration_time_control_L0+1, 0
0x0376	0x3BF5      	SUBWFB     R5, 1
0x0377	0x0859      	MOVF       calibration_time_control_L0+2, 0
0x0378	0x3BF6      	SUBWFB     R6, 1
0x0379	0x085A      	MOVF       calibration_time_control_L0+3, 0
0x037A	0x3BF7      	SUBWFB     R7, 1
0x037B	0x3000      	MOVLW      0
0x037C	0x0277      	SUBWF      R7, 0
0x037D	0x1D03      	BTFSS      STATUS, 2
0x037E	0x2B89      	GOTO       L__calibration93
0x037F	0x301E      	MOVLW      30
0x0380	0x0276      	SUBWF      R6, 0
0x0381	0x1D03      	BTFSS      STATUS, 2
0x0382	0x2B89      	GOTO       L__calibration93
0x0383	0x3084      	MOVLW      132
0x0384	0x0275      	SUBWF      R5, 0
0x0385	0x1D03      	BTFSS      STATUS, 2
0x0386	0x2B89      	GOTO       L__calibration93
0x0387	0x3080      	MOVLW      128
0x0388	0x0274      	SUBWF      R4, 0
L__calibration93:
0x0389	0x1803      	BTFSC      STATUS, 0
0x038A	0x2BAD      	GOTO       L_calibration46
;Controlador5A.c,335 :: 		signal_T_value = (unsigned) t2_sig1;   //valor da largura do pulso do canal1
0x038B	0x0021      	MOVLB      1
0x038C	0x0830      	MOVF       _t2_sig1, 0
0x038D	0x00D5      	MOVWF      calibration_signal_T_value_L0
0x038E	0x0831      	MOVF       _t2_sig1+1, 0
0x038F	0x00D6      	MOVWF      calibration_signal_T_value_L0+1
;Controlador5A.c,336 :: 		if(signal_T_value > signal1_H_value)
0x0390	0x0831      	MOVF       _t2_sig1+1, 0
0x0391	0x024E      	SUBWF      calibration_signal1_H_value_L0+1, 0
0x0392	0x1D03      	BTFSS      STATUS, 2
0x0393	0x2B96      	GOTO       L__calibration94
0x0394	0x0830      	MOVF       _t2_sig1, 0
0x0395	0x024D      	SUBWF      calibration_signal1_H_value_L0, 0
L__calibration94:
0x0396	0x1803      	BTFSC      STATUS, 0
0x0397	0x2B9C      	GOTO       L_calibration47
;Controlador5A.c,337 :: 		signal1_H_value = signal_T_value;
0x0398	0x0855      	MOVF       calibration_signal_T_value_L0, 0
0x0399	0x00CD      	MOVWF      calibration_signal1_H_value_L0
0x039A	0x0856      	MOVF       calibration_signal_T_value_L0+1, 0
0x039B	0x00CE      	MOVWF      calibration_signal1_H_value_L0+1
L_calibration47:
;Controlador5A.c,339 :: 		signal_T_value = (unsigned) t2_sig2;   //valor da largura do pulso do canal1
0x039C	0x082C      	MOVF       _t2_sig2, 0
0x039D	0x00D5      	MOVWF      calibration_signal_T_value_L0
0x039E	0x082D      	MOVF       _t2_sig2+1, 0
0x039F	0x00D6      	MOVWF      calibration_signal_T_value_L0+1
;Controlador5A.c,340 :: 		if(signal_T_value > signal2_H_value)
0x03A0	0x082D      	MOVF       _t2_sig2+1, 0
0x03A1	0x0250      	SUBWF      calibration_signal2_H_value_L0+1, 0
0x03A2	0x1D03      	BTFSS      STATUS, 2
0x03A3	0x2BA6      	GOTO       L__calibration95
0x03A4	0x082C      	MOVF       _t2_sig2, 0
0x03A5	0x024F      	SUBWF      calibration_signal2_H_value_L0, 0
L__calibration95:
0x03A6	0x1803      	BTFSC      STATUS, 0
0x03A7	0x2BAC      	GOTO       L_calibration48
;Controlador5A.c,341 :: 		signal2_H_value = signal_T_value;
0x03A8	0x0855      	MOVF       calibration_signal_T_value_L0, 0
0x03A9	0x00CF      	MOVWF      calibration_signal2_H_value_L0
0x03AA	0x0856      	MOVF       calibration_signal_T_value_L0+1, 0
0x03AB	0x00D0      	MOVWF      calibration_signal2_H_value_L0+1
L_calibration48:
;Controlador5A.c,342 :: 		}
0x03AC	0x2B69      	GOTO       L_calibration45
L_calibration46:
0x03AD	0x0021      	MOVLB      1
;Controlador5A.c,344 :: 		lower_8bits = signal1_H_value & 0xff;        //seleciona os 8 bits menos significativos
0x03AE	0x30FF      	MOVLW      255
0x03AF	0x054D      	ANDWF      calibration_signal1_H_value_L0, 0
0x03B0	0x00F3      	MOVWF      R3
0x03B1	0x0873      	MOVF       R3, 0
0x03B2	0x0020      	MOVLB      0
0x03B3	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,345 :: 		upper_8bits = (signal1_H_value >> 8) & 0xff; //seleciona os 8 bits mais significativos
0x03B4	0x0021      	MOVLB      1
0x03B5	0x084E      	MOVF       calibration_signal1_H_value_L0+1, 0
0x03B6	0x00F0      	MOVWF      R0
0x03B7	0x01F1      	CLRF       R1
0x03B8	0x30FF      	MOVLW      255
0x03B9	0x0570      	ANDWF      R0, 0
0x03BA	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,346 :: 		EEPROM_Write(0X04,lower_8bits);
0x03BB	0x3004      	MOVLW      4
0x03BC	0x00DB      	MOVWF      FARG_EEPROM_Write_Address
0x03BD	0x0873      	MOVF       R3, 0
0x03BE	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x03BF	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,347 :: 		delay_ms(10);
0x03C0	0x301A      	MOVLW      26
0x03C1	0x00FC      	MOVWF      R12
0x03C2	0x30F8      	MOVLW      248
0x03C3	0x00FD      	MOVWF      R13
L_calibration49:
0x03C4	0x0BFD      	DECFSZ     R13, 1
0x03C5	0x2BC4      	GOTO       L_calibration49
0x03C6	0x0BFC      	DECFSZ     R12, 1
0x03C7	0x2BC4      	GOTO       L_calibration49
0x03C8	0x0000      	NOP
;Controlador5A.c,348 :: 		EEPROM_Write(0X05,upper_8bits);
0x03C9	0x3005      	MOVLW      5
0x03CA	0x0021      	MOVLB      1
0x03CB	0x00DB      	MOVWF      FARG_EEPROM_Write_Address
0x03CC	0x0838      	MOVF       _upper_8bits, 0
0x03CD	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x03CE	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,349 :: 		delay_ms(10);
0x03CF	0x301A      	MOVLW      26
0x03D0	0x00FC      	MOVWF      R12
0x03D1	0x30F8      	MOVLW      248
0x03D2	0x00FD      	MOVWF      R13
L_calibration50:
0x03D3	0x0BFD      	DECFSZ     R13, 1
0x03D4	0x2BD3      	GOTO       L_calibration50
0x03D5	0x0BFC      	DECFSZ     R12, 1
0x03D6	0x2BD3      	GOTO       L_calibration50
0x03D7	0x0000      	NOP
;Controlador5A.c,351 :: 		lower_8bits = signal2_H_value & 0xff;        //seleciona os 8 bits menos significativos
0x03D8	0x30FF      	MOVLW      255
0x03D9	0x0021      	MOVLB      1
0x03DA	0x054F      	ANDWF      calibration_signal2_H_value_L0, 0
0x03DB	0x00F3      	MOVWF      R3
0x03DC	0x0873      	MOVF       R3, 0
0x03DD	0x0020      	MOVLB      0
0x03DE	0x00EF      	MOVWF      _lower_8bits
;Controlador5A.c,352 :: 		upper_8bits = (signal2_H_value >> 8) & 0xff; //seleciona os 8 bits mais significativos
0x03DF	0x0021      	MOVLB      1
0x03E0	0x0850      	MOVF       calibration_signal2_H_value_L0+1, 0
0x03E1	0x00F0      	MOVWF      R0
0x03E2	0x01F1      	CLRF       R1
0x03E3	0x30FF      	MOVLW      255
0x03E4	0x0570      	ANDWF      R0, 0
0x03E5	0x00B8      	MOVWF      _upper_8bits
;Controlador5A.c,353 :: 		EEPROM_Write(0X06,lower_8bits);
0x03E6	0x3006      	MOVLW      6
0x03E7	0x00DB      	MOVWF      FARG_EEPROM_Write_Address
0x03E8	0x0873      	MOVF       R3, 0
0x03E9	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x03EA	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,354 :: 		delay_ms(10);
0x03EB	0x301A      	MOVLW      26
0x03EC	0x00FC      	MOVWF      R12
0x03ED	0x30F8      	MOVLW      248
0x03EE	0x00FD      	MOVWF      R13
L_calibration51:
0x03EF	0x0BFD      	DECFSZ     R13, 1
0x03F0	0x2BEF      	GOTO       L_calibration51
0x03F1	0x0BFC      	DECFSZ     R12, 1
0x03F2	0x2BEF      	GOTO       L_calibration51
0x03F3	0x0000      	NOP
;Controlador5A.c,355 :: 		EEPROM_Write(0X07,upper_8bits);
0x03F4	0x3007      	MOVLW      7
0x03F5	0x0021      	MOVLB      1
0x03F6	0x00DB      	MOVWF      FARG_EEPROM_Write_Address
0x03F7	0x0838      	MOVF       _upper_8bits, 0
0x03F8	0x00DC      	MOVWF      FARG_EEPROM_Write_data_
0x03F9	0x218B      	CALL       _EEPROM_Write
;Controlador5A.c,356 :: 		delay_ms(10);
0x03FA	0x301A      	MOVLW      26
0x03FB	0x00FC      	MOVWF      R12
0x03FC	0x30F8      	MOVLW      248
0x03FD	0x00FD      	MOVWF      R13
L_calibration52:
0x03FE	0x0BFD      	DECFSZ     R13, 1
0x03FF	0x2BFE      	GOTO       L_calibration52
0x0400	0x0BFC      	DECFSZ     R12, 1
0x0401	0x2BFE      	GOTO       L_calibration52
0x0402	0x0000      	NOP
;Controlador5A.c,358 :: 		error_led_blink(1600);                      //indica a captura do valor maximo
0x0403	0x3040      	MOVLW      64
0x0404	0x0021      	MOVLB      1
0x0405	0x00DB      	MOVWF      FARG_error_led_blink_time_ms
0x0406	0x3006      	MOVLW      6
0x0407	0x00DC      	MOVWF      FARG_error_led_blink_time_ms+1
0x0408	0x2152      	CALL       _error_led_blink
;Controlador5A.c,359 :: 		ERROR_LED = 0;
0x0409	0x0020      	MOVLB      0
0x040A	0x108C      	BCF        RA1_bit, 1
;Controlador5A.c,360 :: 		}
L_end_calibration:
0x040B	0x0008      	RETURN
; end of _calibration
_set_duty_cycle:
;Controlador5A.c,78 :: 		void set_duty_cycle(unsigned int channel, unsigned int duty ){ //funcao responsavel por setar o dutycicle nos PWMS, variando de 0 a 255
;Controlador5A.c,79 :: 		if(channel == 1)
0x040C	0x3000      	MOVLW      0
0x040D	0x0021      	MOVLB      1
0x040E	0x064E      	XORWF      FARG_set_duty_cycle_channel+1, 0
0x040F	0x1D03      	BTFSS      STATUS, 2
0x0410	0x2C13      	GOTO       L__set_duty_cycle63
0x0411	0x3001      	MOVLW      1
0x0412	0x064D      	XORWF      FARG_set_duty_cycle_channel, 0
L__set_duty_cycle63:
0x0413	0x1D03      	BTFSS      STATUS, 2
0x0414	0x2C18      	GOTO       L_set_duty_cycle0
;Controlador5A.c,80 :: 		CCPR1L = duty;
0x0415	0x084F      	MOVF       FARG_set_duty_cycle_duty, 0
0x0416	0x0025      	MOVLB      5
0x0417	0x0091      	MOVWF      CCPR1L
L_set_duty_cycle0:
;Controlador5A.c,81 :: 		if(channel == 2)
0x0418	0x3000      	MOVLW      0
0x0419	0x0021      	MOVLB      1
0x041A	0x064E      	XORWF      FARG_set_duty_cycle_channel+1, 0
0x041B	0x1D03      	BTFSS      STATUS, 2
0x041C	0x2C1F      	GOTO       L__set_duty_cycle64
0x041D	0x3002      	MOVLW      2
0x041E	0x064D      	XORWF      FARG_set_duty_cycle_channel, 0
L__set_duty_cycle64:
0x041F	0x1D03      	BTFSS      STATUS, 2
0x0420	0x2C24      	GOTO       L_set_duty_cycle1
;Controlador5A.c,82 :: 		CCPR2L = duty;
0x0421	0x084F      	MOVF       FARG_set_duty_cycle_duty, 0
0x0422	0x0025      	MOVLB      5
0x0423	0x0098      	MOVWF      CCPR2L
L_set_duty_cycle1:
;Controlador5A.c,83 :: 		}
L_end_set_duty_cycle:
0x0424	0x0008      	RETURN
; end of _set_duty_cycle
_pwm_steering:
;Controlador5A.c,84 :: 		void pwm_steering(unsigned int channel,unsigned int port){
;Controlador5A.c,85 :: 		if(channel == 1){
0x0425	0x3000      	MOVLW      0
0x0426	0x0021      	MOVLB      1
0x0427	0x064E      	XORWF      FARG_pwm_steering_channel+1, 0
0x0428	0x1D03      	BTFSS      STATUS, 2
0x0429	0x2C2C      	GOTO       L__pwm_steering66
0x042A	0x3001      	MOVLW      1
0x042B	0x064D      	XORWF      FARG_pwm_steering_channel, 0
L__pwm_steering66:
0x042C	0x1D03      	BTFSS      STATUS, 2
0x042D	0x2C4B      	GOTO       L_pwm_steering2
;Controlador5A.c,86 :: 		PSTR1CON.B0 = 0;   //1 = P1A pin is assigned to port pin
0x042E	0x0025      	MOVLB      5
0x042F	0x1016      	BCF        PSTR1CON, 0
;Controlador5A.c,87 :: 		PSTR1CON.B1 = 0;   //1 = P1B pin is assigned to port pin
0x0430	0x1096      	BCF        PSTR1CON, 1
;Controlador5A.c,88 :: 		if(port == 1){
0x0431	0x3000      	MOVLW      0
0x0432	0x0021      	MOVLB      1
0x0433	0x0650      	XORWF      FARG_pwm_steering_port+1, 0
0x0434	0x1D03      	BTFSS      STATUS, 2
0x0435	0x2C38      	GOTO       L__pwm_steering67
0x0436	0x3001      	MOVLW      1
0x0437	0x064F      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering67:
0x0438	0x1D03      	BTFSS      STATUS, 2
0x0439	0x2C3E      	GOTO       L_pwm_steering3
;Controlador5A.c,89 :: 		P1B = 0;         //port pin stays at low
0x043A	0x0020      	MOVLB      0
0x043B	0x120E      	BCF        RC4_bit, 4
;Controlador5A.c,90 :: 		PSTR1CON.B0 = 1; //1 = P1A pin has the PWM waveform
0x043C	0x0025      	MOVLB      5
0x043D	0x1416      	BSF        PSTR1CON, 0
;Controlador5A.c,91 :: 		}
L_pwm_steering3:
;Controlador5A.c,92 :: 		if(port == 2){
0x043E	0x3000      	MOVLW      0
0x043F	0x0021      	MOVLB      1
0x0440	0x0650      	XORWF      FARG_pwm_steering_port+1, 0
0x0441	0x1D03      	BTFSS      STATUS, 2
0x0442	0x2C45      	GOTO       L__pwm_steering68
0x0443	0x3002      	MOVLW      2
0x0444	0x064F      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering68:
0x0445	0x1D03      	BTFSS      STATUS, 2
0x0446	0x2C4B      	GOTO       L_pwm_steering4
;Controlador5A.c,93 :: 		P1A = 0;         //port pin stays at low
0x0447	0x0020      	MOVLB      0
0x0448	0x128E      	BCF        RC5_bit, 5
;Controlador5A.c,94 :: 		PSTR1CON.B1 = 1; //1 = P1B pin has the PWM waveform
0x0449	0x0025      	MOVLB      5
0x044A	0x1496      	BSF        PSTR1CON, 1
;Controlador5A.c,95 :: 		}
L_pwm_steering4:
;Controlador5A.c,96 :: 		}//channel1 if
L_pwm_steering2:
;Controlador5A.c,97 :: 		if(channel == 2){
0x044B	0x3000      	MOVLW      0
0x044C	0x0021      	MOVLB      1
0x044D	0x064E      	XORWF      FARG_pwm_steering_channel+1, 0
0x044E	0x1D03      	BTFSS      STATUS, 2
0x044F	0x2C52      	GOTO       L__pwm_steering69
0x0450	0x3002      	MOVLW      2
0x0451	0x064D      	XORWF      FARG_pwm_steering_channel, 0
L__pwm_steering69:
0x0452	0x1D03      	BTFSS      STATUS, 2
0x0453	0x2C71      	GOTO       L_pwm_steering5
;Controlador5A.c,98 :: 		PSTR2CON.B0 = 0;   //1 = P2A pin is assigned to port pin
0x0454	0x0025      	MOVLB      5
0x0455	0x101D      	BCF        PSTR2CON, 0
;Controlador5A.c,99 :: 		PSTR2CON.B1 = 0;   //1 = P2B pin is assigned to port pin
0x0456	0x109D      	BCF        PSTR2CON, 1
;Controlador5A.c,100 :: 		if(port == 1){
0x0457	0x3000      	MOVLW      0
0x0458	0x0021      	MOVLB      1
0x0459	0x0650      	XORWF      FARG_pwm_steering_port+1, 0
0x045A	0x1D03      	BTFSS      STATUS, 2
0x045B	0x2C5E      	GOTO       L__pwm_steering70
0x045C	0x3001      	MOVLW      1
0x045D	0x064F      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering70:
0x045E	0x1D03      	BTFSS      STATUS, 2
0x045F	0x2C64      	GOTO       L_pwm_steering6
;Controlador5A.c,101 :: 		P2B = 0;         //port pin stays at low
0x0460	0x0020      	MOVLB      0
0x0461	0x120C      	BCF        RA4_bit, 4
;Controlador5A.c,102 :: 		PSTR2CON.B0 = 1; //1 = P2A pin has the PWM waveform
0x0462	0x0025      	MOVLB      5
0x0463	0x141D      	BSF        PSTR2CON, 0
;Controlador5A.c,103 :: 		}
L_pwm_steering6:
;Controlador5A.c,104 :: 		if(port == 2){
0x0464	0x3000      	MOVLW      0
0x0465	0x0021      	MOVLB      1
0x0466	0x0650      	XORWF      FARG_pwm_steering_port+1, 0
0x0467	0x1D03      	BTFSS      STATUS, 2
0x0468	0x2C6B      	GOTO       L__pwm_steering71
0x0469	0x3002      	MOVLW      2
0x046A	0x064F      	XORWF      FARG_pwm_steering_port, 0
L__pwm_steering71:
0x046B	0x1D03      	BTFSS      STATUS, 2
0x046C	0x2C71      	GOTO       L_pwm_steering7
;Controlador5A.c,105 :: 		P2A = 0;         //port pin stays at low
0x046D	0x0020      	MOVLB      0
0x046E	0x128C      	BCF        RA5_bit, 5
;Controlador5A.c,106 :: 		PSTR2CON.B1 = 1; //1 = P2B pin has the PWM waveform
0x046F	0x0025      	MOVLB      5
0x0470	0x149D      	BSF        PSTR2CON, 1
;Controlador5A.c,107 :: 		}
L_pwm_steering7:
;Controlador5A.c,108 :: 		}//channel2 if
L_pwm_steering5:
;Controlador5A.c,110 :: 		}
L_end_pwm_steering:
0x0471	0x0008      	RETURN
; end of _pwm_steering
___CC2DW:
;__Lib_System.c,71 :: 		
;__Lib_System.c,73 :: 		
_CC2DL_Loop1:
;__Lib_System.c,74 :: 		
0x0472	0x0012      	MOVIW      0, 2
;__Lib_System.c,75 :: 		
0x0473	0x001E      	MOVWI      FSR1++ 
;__Lib_System.c,76 :: 		
0x0474	0x03F0      	DECF       R0, 1
;__Lib_System.c,77 :: 		
0x0475	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,78 :: 		
0x0476	0x2C72      	GOTO       _CC2DL_Loop1
;__Lib_System.c,79 :: 		
0x0477	0x03F1      	DECF       R1, 1
;__Lib_System.c,80 :: 		
0x0478	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,81 :: 		
0x0479	0x2C72      	GOTO       _CC2DL_Loop1
;__Lib_System.c,83 :: 		
L_end___CC2DW:
0x047A	0x0008      	RETURN
; end of ___CC2DW
_setup_pwms:
;Controlador5A.c,31 :: 		void setup_pwms(){
;Controlador5A.c,32 :: 		T2CON = 0;   //desliga o Timer2, timer responsavel pelos PWMS
0x047B	0x0020      	MOVLB      0
0x047C	0x019C      	CLRF       T2CON
;Controlador5A.c,33 :: 		PR2 = 255;
0x047D	0x30FF      	MOVLW      255
0x047E	0x009B      	MOVWF      PR2
;Controlador5A.c,36 :: 		CCPTMRS.B1 = 0;    //00 = CCP1 is based off Timer2 in PWM mode
0x047F	0x0025      	MOVLB      5
0x0480	0x109E      	BCF        CCPTMRS, 1
;Controlador5A.c,37 :: 		CCPTMRS.B0 = 0;
0x0481	0x101E      	BCF        CCPTMRS, 0
;Controlador5A.c,40 :: 		PSTR1CON.B0 = 1;   //1 = P1A pin has the PWM waveform with polarity control from CCP1M<1:0>
0x0482	0x1416      	BSF        PSTR1CON, 0
;Controlador5A.c,41 :: 		PSTR1CON.B1 = 1;   //1 = P1B pin has the PWM waveform with polarity control from CCP1M<1:0>
0x0483	0x1496      	BSF        PSTR1CON, 1
;Controlador5A.c,42 :: 		PSTR1CON.B2 = 0;   //0 = P1C pin is assigned to port pin
0x0484	0x1116      	BCF        PSTR1CON, 2
;Controlador5A.c,43 :: 		PSTR1CON.B3 = 0;   //0 = P1D pin is assigned to port pin
0x0485	0x1196      	BCF        PSTR1CON, 3
;Controlador5A.c,44 :: 		PSTR1CON.B4 = 1;   //Steering Sync bit, 0 = Output steering update occurs at the beginning of the instruction cycle boundary
0x0486	0x1616      	BSF        PSTR1CON, 4
;Controlador5A.c,45 :: 		CCPR1L  = 0b11111111; //colocando nivel logico alto nas duas saidas para travar os motores
0x0487	0x30FF      	MOVLW      255
0x0488	0x0091      	MOVWF      CCPR1L
;Controlador5A.c,46 :: 		CCP1CON = 0b00111100; //see below:
0x0489	0x303C      	MOVLW      60
0x048A	0x0093      	MOVWF      CCP1CON
;Controlador5A.c,60 :: 		CCPTMRS.B3 = 0;    //00 = CCP2 is based off Timer2 in PWM mode
0x048B	0x119E      	BCF        CCPTMRS, 3
;Controlador5A.c,61 :: 		CCPTMRS.B2 = 0;
0x048C	0x111E      	BCF        CCPTMRS, 2
;Controlador5A.c,64 :: 		PSTR2CON.B0 = 1;   //1 = P1A pin has the PWM waveform with polarity control from CCP1M<1:0>
0x048D	0x141D      	BSF        PSTR2CON, 0
;Controlador5A.c,65 :: 		PSTR2CON.B1 = 1;   //1 = P1B pin has the PWM waveform with polarity control from CCP1M<1:0>
0x048E	0x149D      	BSF        PSTR2CON, 1
;Controlador5A.c,66 :: 		PSTR2CON.B2 = 0;   //0 = P1C pin is assigned to port pin
0x048F	0x111D      	BCF        PSTR2CON, 2
;Controlador5A.c,67 :: 		PSTR2CON.B3 = 0;   //0 = P1D pin is assigned to port pin
0x0490	0x119D      	BCF        PSTR2CON, 3
;Controlador5A.c,68 :: 		PSTR2CON.B4 = 1;   //Steering Sync bit, 0 = Output steering update occurs at the beginning of the instruction cycle boundary
0x0491	0x161D      	BSF        PSTR2CON, 4
;Controlador5A.c,69 :: 		CCPR2L  = 0b11111111;  //colocando nivel logico alto nas duas saidas para travar os motores
0x0492	0x30FF      	MOVLW      255
0x0493	0x0098      	MOVWF      CCPR2L
;Controlador5A.c,70 :: 		CCP2CON = 0b00111100; //Mesma configuracao do ECCP1
0x0494	0x303C      	MOVLW      60
0x0495	0x009A      	MOVWF      CCP2CON
;Controlador5A.c,71 :: 		T2CON = 0b00000100;  //pre scaler =  1
0x0496	0x3004      	MOVLW      4
0x0497	0x0020      	MOVLB      0
0x0498	0x009C      	MOVWF      T2CON
;Controlador5A.c,76 :: 		}
L_end_setup_pwms:
0x0499	0x0008      	RETURN
; end of _setup_pwms
_setup_Timer_1:
;Controlador5A.c,113 :: 		void setup_Timer_1(){
;Controlador5A.c,115 :: 		T1CKPS1_bit = 0x00;                        //Prescaller TMR1 1:2, cada bit do timer1 e correspondente a 1 us
0x049A	0x0020      	MOVLB      0
0x049B	0x1298      	BCF        T1CKPS1_bit, 5
;Controlador5A.c,116 :: 		T1CKPS0_bit = 0x01;                        //
0x049C	0x1618      	BSF        T1CKPS0_bit, 4
;Controlador5A.c,117 :: 		TMR1CS1_bit = 0x00;                        //Clock: Fosc/4 = instruction clock
0x049D	0x1398      	BCF        TMR1CS1_bit, 7
;Controlador5A.c,118 :: 		TMR1CS0_bit = 0x00;                        //Clock: Fosc/4 = instruction clock
0x049E	0x1318      	BCF        TMR1CS0_bit, 6
;Controlador5A.c,119 :: 		TMR1ON_bit  = 0x01;                        //Inicia a contagem do Timer1
0x049F	0x1418      	BSF        TMR1ON_bit, 0
;Controlador5A.c,120 :: 		TMR1IE_bit  = 0x01;                        //Habilita interrupcoes de TMR1
0x04A0	0x0021      	MOVLB      1
0x04A1	0x1411      	BSF        TMR1IE_bit, 0
;Controlador5A.c,121 :: 		TMR1L       = 0x00;                        //zera o Timer1
0x04A2	0x0020      	MOVLB      0
0x04A3	0x0196      	CLRF       TMR1L
;Controlador5A.c,122 :: 		TMR1H       = 0x00;
0x04A4	0x0197      	CLRF       TMR1H
;Controlador5A.c,126 :: 		}
L_end_setup_Timer_1:
0x04A5	0x0008      	RETURN
; end of _setup_Timer_1
_setup_port:
;Controlador5A.c,131 :: 		void setup_port(){
;Controlador5A.c,133 :: 		CM1CON0       = 0;
0x04A6	0x0022      	MOVLB      2
0x04A7	0x0191      	CLRF       CM1CON0
;Controlador5A.c,134 :: 		CM2CON0       = 0;
0x04A8	0x0193      	CLRF       CM2CON0
;Controlador5A.c,137 :: 		RXDTSEL_bit = 1;     //RXDTSEL: RX/DT function is on RA1
0x04A9	0x179D      	BSF        RXDTSEL_bit, 7
;Controlador5A.c,138 :: 		TXCKSEL_bit = 1;     //TXDTSEL: TX/CK function is on RA0
0x04AA	0x151D      	BSF        TXCKSEL_bit, 2
;Controlador5A.c,139 :: 		UART1_Init(9600);    //Initialize UART module at 9600 bps      153600 = 9600*16
0x04AB	0x0023      	MOVLB      3
0x04AC	0x159F      	BSF        BAUDCON, 3
0x04AD	0x30CF      	MOVLW      207
0x04AE	0x009B      	MOVWF      SPBRG
0x04AF	0x019C      	CLRF       SPBRG+1
0x04B0	0x151E      	BSF        TXSTA, 2
0x04B1	0x21C4      	CALL       _UART1_Init
;Controlador5A.c,140 :: 		Delay_ms(100);       //Wait for UART module to stabilize
0x04B2	0x3002      	MOVLW      2
0x04B3	0x00FB      	MOVWF      R11
0x04B4	0x3004      	MOVLW      4
0x04B5	0x00FC      	MOVWF      R12
0x04B6	0x30BA      	MOVLW      186
0x04B7	0x00FD      	MOVWF      R13
L_setup_port8:
0x04B8	0x0BFD      	DECFSZ     R13, 1
0x04B9	0x2CB8      	GOTO       L_setup_port8
0x04BA	0x0BFC      	DECFSZ     R12, 1
0x04BB	0x2CB8      	GOTO       L_setup_port8
0x04BC	0x0BFB      	DECFSZ     R11, 1
0x04BD	0x2CB8      	GOTO       L_setup_port8
0x04BE	0x0000      	NOP
;Controlador5A.c,143 :: 		P2BSEL_bit =  1;    //P2BSEL: 1 = P2B function is on RA4
0x04BF	0x0022      	MOVLB      2
0x04C0	0x149E      	BSF        P2BSEL_bit, 1
;Controlador5A.c,144 :: 		CCP2SEL_bit =  1;   //CCP2SEL:1 = CCP2/P2A function is on RA5
0x04C1	0x141E      	BSF        CCP2SEL_bit, 0
;Controlador5A.c,146 :: 		ANSELA     = 0; //Nenhuma porta analogica
0x04C2	0x0023      	MOVLB      3
0x04C3	0x018C      	CLRF       ANSELA
;Controlador5A.c,147 :: 		ANSELC  = 0x01; //RC0 analogico AN4, ultimo bit do ANSELC.
0x04C4	0x3001      	MOVLW      1
0x04C5	0x008E      	MOVWF      ANSELC
;Controlador5A.c,148 :: 		ADC_Init();     // Initialize ADC module with default settings
0x04C6	0x212B      	CALL       _ADC_Init
;Controlador5A.c,153 :: 		TRISA1_bit = 0; //RX(UART) e LED_ERROR
0x04C7	0x108C      	BCF        TRISA1_bit, 1
;Controlador5A.c,154 :: 		TRISA2_bit = 1; //RADIO INPUT1(CCP3)
0x04C8	0x150C      	BSF        TRISA2_bit, 2
;Controlador5A.c,155 :: 		TRISA3_bit = 1; //MLCR
0x04C9	0x158C      	BSF        TRISA3_bit, 3
;Controlador5A.c,156 :: 		TRISA4_bit = 0; //PWM OUTPUT(P2B)
0x04CA	0x120C      	BCF        TRISA4_bit, 4
;Controlador5A.c,157 :: 		TRISA5_bit = 0; //PWM OUTPUT(P2A)
0x04CB	0x128C      	BCF        TRISA5_bit, 5
;Controlador5A.c,161 :: 		TRISC0_bit = 1; //AN4 (LOW BATTERY)
0x04CC	0x140E      	BSF        TRISC0_bit, 0
;Controlador5A.c,162 :: 		TRISC1_bit = 1; //RADIO INPUT2(CCP4)
0x04CD	0x148E      	BSF        TRISC1_bit, 1
;Controlador5A.c,163 :: 		TRISC2_bit = 1; //ERROR FLAG2
0x04CE	0x150E      	BSF        TRISC2_bit, 2
;Controlador5A.c,164 :: 		TRISC3_bit = 1; //ERROR FLAG1
0x04CF	0x158E      	BSF        TRISC3_bit, 3
;Controlador5A.c,165 :: 		TRISC4_bit = 0; //PWM OUTPUT(P1B)
0x04D0	0x120E      	BCF        TRISC4_bit, 4
;Controlador5A.c,166 :: 		TRISC5_bit = 0; //PWM OUTPUT(P1A)
0x04D1	0x128E      	BCF        TRISC5_bit, 5
;Controlador5A.c,170 :: 		GIE_bit    = 0X01;   //Habilita a interrupcao Global
0x04D2	0x178B      	BSF        GIE_bit, 7
;Controlador5A.c,171 :: 		PEIE_bit   = 0X01;   //Habilita a interrupcao por perifericos
0x04D3	0x170B      	BSF        PEIE_bit, 6
;Controlador5A.c,172 :: 		CCP3IE_bit  = 0x01;  //Habilita interrupcoes do modulo CCP3(RADIO INPUT1)
0x04D4	0x1613      	BSF        CCP3IE_bit, 4
;Controlador5A.c,173 :: 		CCP4IE_bit  = 0x01;  //Habilita interrupcoes do modulo CCP4(RADIO INPUT2)
0x04D5	0x1693      	BSF        CCP4IE_bit, 5
;Controlador5A.c,174 :: 		CCP3CON     = 0x05;  //Configura captura por borda de subida
0x04D6	0x3005      	MOVLW      5
0x04D7	0x0026      	MOVLB      6
0x04D8	0x0093      	MOVWF      CCP3CON
;Controlador5A.c,175 :: 		CCP4CON     = 0x05;  //Configura captura por borda de subida
0x04D9	0x3005      	MOVLW      5
0x04DA	0x009A      	MOVWF      CCP4CON
;Controlador5A.c,177 :: 		}
L_end_setup_port:
0x04DB	0x0008      	RETURN
; end of _setup_port
_main:
0x04DC	0x2588      	CALL       1416
;Controlador5A.c,397 :: 		void main() {
;Controlador5A.c,398 :: 		OSCCON = 0b01110010; //Coloca o oscillador interno a 8Mz. NAO APAGAR ESSA LINHA (talvez muda-la pra dentro do setup_port)
0x04DD	0x3072      	MOVLW      114
0x04DE	0x0021      	MOVLB      1
0x04DF	0x0099      	MOVWF      OSCCON
;Controlador5A.c,399 :: 		setup_port();
0x04E0	0x24A6      	CALL       _setup_port
;Controlador5A.c,400 :: 		setup_pwms();
0x04E1	0x247B      	CALL       _setup_pwms
;Controlador5A.c,401 :: 		setup_Timer_1();
0x04E2	0x249A      	CALL       _setup_Timer_1
;Controlador5A.c,402 :: 		UART1_Write_Text("Start");
0x04E3	0x3054      	MOVLW      ?lstr7_Controlador5A
0x04E4	0x0021      	MOVLB      1
0x04E5	0x00DB      	MOVWF      FARG_UART1_Write_Text_uart_text
0x04E6	0x3000      	MOVLW      hi_addr(?lstr7_Controlador5A)
0x04E7	0x00DC      	MOVWF      FARG_UART1_Write_Text_uart_text+1
0x04E8	0x21A9      	CALL       _UART1_Write_Text
;Controlador5A.c,403 :: 		pwm_steering(1,2);
0x04E9	0x3001      	MOVLW      1
0x04EA	0x00CD      	MOVWF      FARG_pwm_steering_channel
0x04EB	0x3000      	MOVLW      0
0x04EC	0x00CE      	MOVWF      FARG_pwm_steering_channel+1
0x04ED	0x3002      	MOVLW      2
0x04EE	0x00CF      	MOVWF      FARG_pwm_steering_port
0x04EF	0x3000      	MOVLW      0
0x04F0	0x00D0      	MOVWF      FARG_pwm_steering_port+1
0x04F1	0x2425      	CALL       _pwm_steering
;Controlador5A.c,404 :: 		pwm_steering(2,2);
0x04F2	0x3002      	MOVLW      2
0x04F3	0x0021      	MOVLB      1
0x04F4	0x00CD      	MOVWF      FARG_pwm_steering_channel
0x04F5	0x3000      	MOVLW      0
0x04F6	0x00CE      	MOVWF      FARG_pwm_steering_channel+1
0x04F7	0x3002      	MOVLW      2
0x04F8	0x00CF      	MOVWF      FARG_pwm_steering_port
0x04F9	0x3000      	MOVLW      0
0x04FA	0x00D0      	MOVWF      FARG_pwm_steering_port+1
0x04FB	0x2425      	CALL       _pwm_steering
;Controlador5A.c,405 :: 		set_duty_cycle(1, 0);
0x04FC	0x3001      	MOVLW      1
0x04FD	0x0021      	MOVLB      1
0x04FE	0x00CD      	MOVWF      FARG_set_duty_cycle_channel
0x04FF	0x3000      	MOVLW      0
0x0500	0x00CE      	MOVWF      FARG_set_duty_cycle_channel+1
0x0501	0x01CF      	CLRF       FARG_set_duty_cycle_duty
0x0502	0x01D0      	CLRF       FARG_set_duty_cycle_duty+1
0x0503	0x240C      	CALL       _set_duty_cycle
;Controlador5A.c,406 :: 		set_duty_cycle(2, 255);
0x0504	0x3002      	MOVLW      2
0x0505	0x0021      	MOVLB      1
0x0506	0x00CD      	MOVWF      FARG_set_duty_cycle_channel
0x0507	0x3000      	MOVLW      0
0x0508	0x00CE      	MOVWF      FARG_set_duty_cycle_channel+1
0x0509	0x30FF      	MOVLW      255
0x050A	0x00CF      	MOVWF      FARG_set_duty_cycle_duty
0x050B	0x01D0      	CLRF       FARG_set_duty_cycle_duty+1
0x050C	0x240C      	CALL       _set_duty_cycle
;Controlador5A.c,407 :: 		delay_ms(1000);
0x050D	0x300B      	MOVLW      11
0x050E	0x00FB      	MOVWF      R11
0x050F	0x3026      	MOVLW      38
0x0510	0x00FC      	MOVWF      R12
0x0511	0x305D      	MOVLW      93
0x0512	0x00FD      	MOVWF      R13
L_main55:
0x0513	0x0BFD      	DECFSZ     R13, 1
0x0514	0x2D13      	GOTO       L_main55
0x0515	0x0BFC      	DECFSZ     R12, 1
0x0516	0x2D13      	GOTO       L_main55
0x0517	0x0BFB      	DECFSZ     R11, 1
0x0518	0x2D13      	GOTO       L_main55
0x0519	0x0000      	NOP
0x051A	0x0000      	NOP
;Controlador5A.c,408 :: 		t2_sig2 = 20000;
0x051B	0x3020      	MOVLW      32
0x051C	0x0021      	MOVLB      1
0x051D	0x00AC      	MOVWF      _t2_sig2
0x051E	0x304E      	MOVLW      78
0x051F	0x00AD      	MOVWF      _t2_sig2+1
0x0520	0x01AE      	CLRF       _t2_sig2+2
0x0521	0x01AF      	CLRF       _t2_sig2+3
;Controlador5A.c,409 :: 		t2_sig1 = 20000;
0x0522	0x3020      	MOVLW      32
0x0523	0x00B0      	MOVWF      _t2_sig1
0x0524	0x304E      	MOVLW      78
0x0525	0x00B1      	MOVWF      _t2_sig1+1
0x0526	0x01B2      	CLRF       _t2_sig1+2
0x0527	0x01B3      	CLRF       _t2_sig1+3
;Controlador5A.c,410 :: 		calibration();
0x0528	0x22A5      	CALL       _calibration
;Controlador5A.c,411 :: 		while(1){
L_main56:
;Controlador5A.c,412 :: 		char *txt = "mikroe \n";
;Controlador5A.c,419 :: 		read_eeprom_signals_data();
0x0529	0x21F4      	CALL       _read_eeprom_signals_data
;Controlador5A.c,420 :: 		delay_ms(100);
0x052A	0x3002      	MOVLW      2
0x052B	0x00FB      	MOVWF      R11
0x052C	0x3004      	MOVLW      4
0x052D	0x00FC      	MOVWF      R12
0x052E	0x30BA      	MOVLW      186
0x052F	0x00FD      	MOVWF      R13
L_main58:
0x0530	0x0BFD      	DECFSZ     R13, 1
0x0531	0x2D30      	GOTO       L_main58
0x0532	0x0BFC      	DECFSZ     R12, 1
0x0533	0x2D30      	GOTO       L_main58
0x0534	0x0BFB      	DECFSZ     R11, 1
0x0535	0x2D30      	GOTO       L_main58
0x0536	0x0000      	NOP
;Controlador5A.c,471 :: 		}
0x0537	0x2D29      	GOTO       L_main56
;Controlador5A.c,472 :: 		}
L_end_main:
0x0538	0x2D38      	GOTO       $+0
; end of _main
0x0588	0x303C      	MOVLW      60
0x0589	0x0084      	MOVWF      FSR0
0x058A	0x3085      	MOVLW      133
0x058B	0x0085      	MOVWF      FSR0H
0x058C	0x303E      	MOVLW      62
0x058D	0x00F0      	MOVWF      R0
0x058E	0x3001      	MOVLW      1
0x058F	0x00F1      	MOVWF      R1
0x0590	0x3027      	MOVLW      39
0x0591	0x0086      	MOVWF      FSR1
0x0592	0x3000      	MOVLW      0
0x0593	0x0087      	MOVWF      FSR1H
0x0594	0x2472      	CALL       1138
0x0595	0x307A      	MOVLW      122
0x0596	0x0084      	MOVWF      FSR0
0x0597	0x3085      	MOVLW      133
0x0598	0x0085      	MOVWF      FSR0H
0x0599	0x300C      	MOVLW      12
0x059A	0x00F0      	MOVWF      R0
0x059B	0x3001      	MOVLW      1
0x059C	0x00F1      	MOVWF      R1
0x059D	0x30A0      	MOVLW      160
0x059E	0x0086      	MOVWF      FSR1
0x059F	0x3000      	MOVLW      0
0x05A0	0x0087      	MOVWF      FSR1H
0x05A1	0x2472      	CALL       1138
0x05A2	0x3086      	MOVLW      134
0x05A3	0x0084      	MOVWF      FSR0
0x05A4	0x3085      	MOVLW      133
0x05A5	0x0085      	MOVWF      FSR0H
0x05A6	0x3002      	MOVLW      2
0x05A7	0x00F0      	MOVWF      R0
0x05A8	0x3001      	MOVLW      1
0x05A9	0x00F1      	MOVWF      R1
0x05AA	0x3065      	MOVLW      101
0x05AB	0x0086      	MOVWF      FSR1
0x05AC	0x3000      	MOVLW      0
0x05AD	0x0087      	MOVWF      FSR1H
0x05AE	0x2472      	CALL       1138
0x05AF	0x0008      	RETURN
;Controlador5A.c,0 :: ?ICS?lstr1_Controlador5A
0x053C	0x344C ;?ICS?lstr1_Controlador5A+0
0x053D	0x344F ;?ICS?lstr1_Controlador5A+1
0x053E	0x3457 ;?ICS?lstr1_Controlador5A+2
0x053F	0x3420 ;?ICS?lstr1_Controlador5A+3
0x0540	0x3463 ;?ICS?lstr1_Controlador5A+4
0x0541	0x3468 ;?ICS?lstr1_Controlador5A+5
0x0542	0x3461 ;?ICS?lstr1_Controlador5A+6
0x0543	0x346E ;?ICS?lstr1_Controlador5A+7
0x0544	0x346E ;?ICS?lstr1_Controlador5A+8
0x0545	0x3465 ;?ICS?lstr1_Controlador5A+9
0x0546	0x346C ;?ICS?lstr1_Controlador5A+10
0x0547	0x3431 ;?ICS?lstr1_Controlador5A+11
0x0548	0x343A ;?ICS?lstr1_Controlador5A+12
0x0549	0x3420 ;?ICS?lstr1_Controlador5A+13
0x054A	0x3400 ;?ICS?lstr1_Controlador5A+14
; end of ?ICS?lstr1_Controlador5A
;Controlador5A.c,0 :: ?ICS?lstr3_Controlador5A
0x054B	0x3409 ;?ICS?lstr3_Controlador5A+0
0x054C	0x3400 ;?ICS?lstr3_Controlador5A+1
; end of ?ICS?lstr3_Controlador5A
;Controlador5A.c,0 :: ?ICS?lstr2_Controlador5A
0x054D	0x3420 ;?ICS?lstr2_Controlador5A+0
0x054E	0x3463 ;?ICS?lstr2_Controlador5A+1
0x054F	0x3468 ;?ICS?lstr2_Controlador5A+2
0x0550	0x3461 ;?ICS?lstr2_Controlador5A+3
0x0551	0x346E ;?ICS?lstr2_Controlador5A+4
0x0552	0x346E ;?ICS?lstr2_Controlador5A+5
0x0553	0x3465 ;?ICS?lstr2_Controlador5A+6
0x0554	0x346C ;?ICS?lstr2_Controlador5A+7
0x0555	0x3432 ;?ICS?lstr2_Controlador5A+8
0x0556	0x343A ;?ICS?lstr2_Controlador5A+9
0x0557	0x3420 ;?ICS?lstr2_Controlador5A+10
0x0558	0x3400 ;?ICS?lstr2_Controlador5A+11
; end of ?ICS?lstr2_Controlador5A
;Controlador5A.c,0 :: ?ICS?lstr4_Controlador5A
0x0559	0x3448 ;?ICS?lstr4_Controlador5A+0
0x055A	0x3449 ;?ICS?lstr4_Controlador5A+1
0x055B	0x3447 ;?ICS?lstr4_Controlador5A+2
0x055C	0x3448 ;?ICS?lstr4_Controlador5A+3
0x055D	0x3420 ;?ICS?lstr4_Controlador5A+4
0x055E	0x3463 ;?ICS?lstr4_Controlador5A+5
0x055F	0x3468 ;?ICS?lstr4_Controlador5A+6
0x0560	0x3461 ;?ICS?lstr4_Controlador5A+7
0x0561	0x346E ;?ICS?lstr4_Controlador5A+8
0x0562	0x346E ;?ICS?lstr4_Controlador5A+9
0x0563	0x3465 ;?ICS?lstr4_Controlador5A+10
0x0564	0x346C ;?ICS?lstr4_Controlador5A+11
0x0565	0x3431 ;?ICS?lstr4_Controlador5A+12
0x0566	0x343A ;?ICS?lstr4_Controlador5A+13
0x0567	0x3420 ;?ICS?lstr4_Controlador5A+14
0x0568	0x3400 ;?ICS?lstr4_Controlador5A+15
; end of ?ICS?lstr4_Controlador5A
;Controlador5A.c,0 :: ?ICS?lstr7_Controlador5A
0x0569	0x3453 ;?ICS?lstr7_Controlador5A+0
0x056A	0x3474 ;?ICS?lstr7_Controlador5A+1
0x056B	0x3461 ;?ICS?lstr7_Controlador5A+2
0x056C	0x3472 ;?ICS?lstr7_Controlador5A+3
0x056D	0x3474 ;?ICS?lstr7_Controlador5A+4
0x056E	0x3400 ;?ICS?lstr7_Controlador5A+5
; end of ?ICS?lstr7_Controlador5A
;Controlador5A.c,0 :: ?ICS?lstr8_Controlador5A
0x056F	0x346D ;?ICS?lstr8_Controlador5A+0
0x0570	0x3469 ;?ICS?lstr8_Controlador5A+1
0x0571	0x346B ;?ICS?lstr8_Controlador5A+2
0x0572	0x3472 ;?ICS?lstr8_Controlador5A+3
0x0573	0x346F ;?ICS?lstr8_Controlador5A+4
0x0574	0x3465 ;?ICS?lstr8_Controlador5A+5
0x0575	0x3420 ;?ICS?lstr8_Controlador5A+6
0x0576	0x340A ;?ICS?lstr8_Controlador5A+7
0x0577	0x3400 ;?ICS?lstr8_Controlador5A+8
; end of ?ICS?lstr8_Controlador5A
;Controlador5A.c,0 :: ?ICS?lstr6_Controlador5A
0x0578	0x340A ;?ICS?lstr6_Controlador5A+0
0x0579	0x3400 ;?ICS?lstr6_Controlador5A+1
; end of ?ICS?lstr6_Controlador5A
;Controlador5A.c,0 :: ?ICS?lstr5_Controlador5A
0x057A	0x3420 ;?ICS?lstr5_Controlador5A+0
0x057B	0x3463 ;?ICS?lstr5_Controlador5A+1
0x057C	0x3468 ;?ICS?lstr5_Controlador5A+2
0x057D	0x3461 ;?ICS?lstr5_Controlador5A+3
0x057E	0x346E ;?ICS?lstr5_Controlador5A+4
0x057F	0x346E ;?ICS?lstr5_Controlador5A+5
0x0580	0x3465 ;?ICS?lstr5_Controlador5A+6
0x0581	0x346C ;?ICS?lstr5_Controlador5A+7
0x0582	0x3432 ;?ICS?lstr5_Controlador5A+8
0x0583	0x343A ;?ICS?lstr5_Controlador5A+9
0x0584	0x3420 ;?ICS?lstr5_Controlador5A+10
0x0585	0x3400 ;?ICS?lstr5_Controlador5A+11
; end of ?ICS?lstr5_Controlador5A
;Controlador5A.c,0 :: ?ICS_n_interrupts_timer1
0x0586	0x3400 ;?ICS_n_interrupts_timer1+0
0x0587	0x3400 ;?ICS_n_interrupts_timer1+1
; end of ?ICS_n_interrupts_timer1
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004     [170]    _interrupt
0x00AE      [28]    _Div_16x16_U
0x00CA      [10]    _UART1_Write
0x00D4      [11]    _EEPROM_Read
0x00DF      [76]    _WordToStr
0x012B      [14]    _ADC_Init
0x0139      [25]    _micros
0x0152      [57]    _error_led_blink
0x018B      [30]    _EEPROM_Write
0x01A9      [27]    _UART1_Write_Text
0x01C4      [48]    _UART1_Init
0x01F4     [177]    _read_eeprom_signals_data
0x02A5     [359]    _calibration
0x040C      [25]    _set_duty_cycle
0x0425      [77]    _pwm_steering
0x0472       [9]    ___CC2DW
0x047B      [31]    _setup_pwms
0x049A      [12]    _setup_Timer_1
0x04A6      [54]    _setup_port
0x04DC      [92]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF0
0x0001       [1]    INDF1
0x0003       [1]    STATUS
0x0004       [1]    FSR0L
0x0005       [1]    FSR0H
0x0006       [1]    FSR1L
0x0007       [1]    FSR1H
0x000A       [1]    PCLATH
0x000B       [0]    GIE_bit
0x000B       [0]    PEIE_bit
0x000B       [1]    INTCON
0x000C       [0]    RA1_bit
0x000C       [0]    RA4_bit
0x000C       [0]    RA5_bit
0x000E       [0]    RC4_bit
0x000E       [0]    RC5_bit
0x0011       [1]    PIR1
0x0011       [0]    TMR1IF_bit
0x0013       [0]    CCP3IF_bit
0x0013       [0]    CCP4IF_bit
0x0016       [1]    TMR1L
0x0017       [1]    TMR1H
0x0018       [0]    T1CKPS0_bit
0x0018       [0]    TMR1ON_bit
0x0018       [0]    T1CKPS1_bit
0x0018       [0]    TMR1CS1_bit
0x0018       [0]    TMR1CS0_bit
0x001B       [1]    PR2
0x001C       [1]    T2CON
0x0027      [15]    ?lstr1_Controlador5A
0x0036       [2]    ?lstr3_Controlador5A
0x0038      [12]    ?lstr2_Controlador5A
0x0044      [16]    ?lstr4_Controlador5A
0x0054       [6]    ?lstr7_Controlador5A
0x005A       [9]    ?lstr8_Controlador5A
0x0063       [2]    ?lstr6_Controlador5A
0x0065       [2]    _n_interrupts_timer1
0x0067       [4]    _t1_sig1
0x006B       [4]    _last_measure
0x006F       [1]    _lower_8bits
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x008C       [0]    TRISA1_bit
0x008C       [0]    TRISA3_bit
0x008C       [0]    TRISA2_bit
0x008C       [0]    TRISA5_bit
0x008C       [0]    TRISA4_bit
0x008E       [0]    TRISC5_bit
0x008E       [0]    TRISC3_bit
0x008E       [0]    TRISC4_bit
0x008E       [0]    TRISC2_bit
0x008E       [0]    TRISC1_bit
0x008E       [0]    TRISC0_bit
0x0091       [0]    TMR1IE_bit
0x0093       [0]    CCP3IE_bit
0x0093       [0]    CCP4IE_bit
0x0099       [1]    OSCCON
0x009D       [0]    ADON_bit
0x009D       [1]    ADCON0
0x009E       [1]    ADCON1
0x00A0      [12]    ?lstr5_Controlador5A
0x00AC       [4]    _t2_sig2
0x00B0       [4]    _t2_sig1
0x00B4       [4]    _t1_sig2
0x00B8       [1]    _upper_8bits
0x00B9       [4]    _UART_Rdy_Ptr
0x00BD       [4]    _UART_Rd_Ptr
0x00C1       [4]    _UART_Tx_Idle_Ptr
0x00C5       [4]    _ADC_Get_Sample_Ptr
0x00C9       [4]    _UART_Wr_Ptr
0x00CD      [11]    read_eeprom_signals_data_buffer_L0
0x00CD       [2]    FARG_pwm_steering_channel
0x00CD       [2]    FARG_set_duty_cycle_channel
0x00CD       [2]    calibration_signal1_H_value_L0
0x00CF       [2]    FARG_pwm_steering_port
0x00CF       [2]    FARG_set_duty_cycle_duty
0x00CF       [2]    calibration_signal2_H_value_L0
0x00D1       [2]    calibration_signal1_L_value_L0
0x00D3       [2]    calibration_signal2_L_value_L0
0x00D5       [2]    calibration_signal_T_value_L0
0x00D7       [4]    calibration_time_control_L0
0x00DB       [1]    FARG_EEPROM_Read_Address
0x00DB       [2]    FARG_error_led_blink_time_ms
0x00DB       [2]    FARG_UART1_Write_Text_uart_text
0x00DB       [2]    FARG_WordToStr_input
0x00DB       [1]    FARG_EEPROM_Write_Address
0x00DC       [1]    FARG_EEPROM_Write_data_
0x00DD       [2]    error_led_blink_i_L0
0x00DD       [2]    FARG_WordToStr_output
0x00DD       [1]    UART1_Write_Text_data__L0
0x00DE       [1]    UART1_Write_Text_counter_L0
0x00DF       [1]    WordToStr_len_L0
0x00E0       [2]    FLOC__WordToStr
0x00E2       [1]    FARG_UART1_Write_data_
0x0111       [1]    CM1CON0
0x0113       [1]    CM2CON0
0x011D       [0]    RXDTSEL_bit
0x011D       [0]    TXCKSEL_bit
0x011E       [0]    CCP2SEL_bit
0x011E       [0]    P2BSEL_bit
0x018C       [1]    ANSELA
0x018E       [1]    ANSELC
0x0191       [2]    EEADR
0x0193       [1]    EEDATL
0x0193       [2]    EEDAT
0x0195       [0]    RD_bit
0x0195       [0]    CFGS_bit
0x0195       [0]    EEPGD_bit
0x0195       [0]    WREN_bit
0x0195       [0]    WR_bit
0x0196       [1]    EECON2
0x0199       [1]    RCREG
0x019A       [1]    TXREG
0x019B       [2]    SPBRG
0x019C       [1]    SPBRGH
0x019D       [1]    RCSTA
0x019E       [1]    TXSTA
0x019F       [1]    BAUDCON
0x0291       [1]    CCPR1L
0x0293       [1]    CCP1CON
0x0296       [1]    PSTR1CON
0x0298       [1]    CCPR2L
0x029A       [1]    CCP2CON
0x029D       [1]    PSTR2CON
0x029E       [1]    CCPTMRS
0x0313       [1]    CCP3CON
0x031A       [1]    CCP4CON
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x053C      [15]    ?ICS?lstr1_Controlador5A
0x054B       [2]    ?ICS?lstr3_Controlador5A
0x054D      [12]    ?ICS?lstr2_Controlador5A
0x0559      [16]    ?ICS?lstr4_Controlador5A
0x0569       [6]    ?ICS?lstr7_Controlador5A
0x056F       [9]    ?ICS?lstr8_Controlador5A
0x0578       [2]    ?ICS?lstr6_Controlador5A
0x057A      [12]    ?ICS?lstr5_Controlador5A
0x0586       [2]    ?ICS_n_interrupts_timer1
//** Label List: ** 
//----------------------------------------------
  L_set_duty_cycle0
  L_set_duty_cycle1
  L_pwm_steering2
  L_pwm_steering3
  L_pwm_steering4
  L_pwm_steering5
  L_pwm_steering6
  L_pwm_steering7
  L_setup_port8
  L_failSafeCheck9
  L_PulseIn110
  L_PulseIn111
  L_PulseIn112
  L_PulseIn113
  L_PulseIn114
  L_PulseIn115
  L_PulseIn116
  L_PulseIn117
  L_PulseIn118
  L_rotateMotor119
  L_rotateMotor120
  L_interrupt21
  L_interrupt22
  L_interrupt23
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_error_led_blink32
  L_error_led_blink33
  L_error_led_blink34
  L_error_led_blink35
  L_error_led_blink36
  L_calibration37
  L_calibration38
  L_calibration39
  L_calibration40
  L_calibration41
  L_calibration42
  L_calibration43
  L_calibration44
  L_calibration45
  L_calibration46
  L_calibration47
  L_calibration48
  L_calibration49
  L_calibration50
  L_calibration51
  L_calibration52
  L_read_eeprom_signals_data53
  L_read_eeprom_signals_data54
  L_main55
  L_main56
  L_main57
  L_main58
  L__interrupt59
  L__interrupt60
  L_end_setup_pwms
  _setup_pwms
  L_end_set_duty_cycle
  _set_duty_cycle
  L__set_duty_cycle63
  L__set_duty_cycle64
  L_end_pwm_steering
  _pwm_steering
  L__pwm_steering66
  L__pwm_steering67
  L__pwm_steering68
  L__pwm_steering69
  L__pwm_steering70
  L__pwm_steering71
  L_end_setup_Timer_1
  _setup_Timer_1
  L_end_micros
  _micros
  L_end_setup_port
  _setup_port
  L_end_failSafeCheck
  _failSafeCheck
  L__failSafeCheck76
  L_end_PulseIn1
  _PulseIn1
  L__PulseIn178
  L__PulseIn179
  L__PulseIn180
  L_end_map
  _map
  L_end_rotateMotor1
  _rotateMotor1
  L__rotateMotor183
  L__rotateMotor184
  L_end_interrupt
  _interrupt
  L__interrupt86
  L_end_error_led_blink
  _error_led_blink
  L__error_led_blink88
  L_end_calibration
  _calibration
  L__calibration90
  L__calibration91
  L__calibration92
  L__calibration93
  L__calibration94
  L__calibration95
  L_end_read_eeprom_signals_data
  _read_eeprom_signals_data
  L_end_main
  _main
  L_ADC_Get_Sample0
  L_ADC_Get_Sample1
  L_end_ADC_Init
  _ADC_Init
  L_end_ADC_Get_Sample
  _ADC_Get_Sample
  L_end_ADC_Read
  _ADC_Read
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__Rtrim98
  L__Ltrim99
  L__FloatToStr100
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L_end_WordToStr
  _WordToStr
  L__WordToStr109
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros111
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr113
  L_end_IntToStr
  _IntToStr
  L__IntToStr115
  L__IntToStr116
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros118
  L__IntToStrWithZeros119
  L__IntToStrWithZeros120
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr122
  L__LongWordToStr123
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros125
  L_end_LongToStr
  _LongToStr
  L__LongToStr127
  L__LongToStr128
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros130
  L__LongIntToStrWithZeros131
  L__LongIntToStrWithZeros132
  L_end_Dec2Bcd
  _Dec2Bcd
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L__Bcd2Dec16136
  L__Bcd2Dec16137
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L__Dec2Bcd16139
  L__Dec2Bcd16140
  L_end_Rtrim
  _Rtrim
  L__Rtrim142
  L_end_Ltrim
  _Ltrim
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr145
  L__FloatToStr146
  L__FloatToStr147
  L__FloatToStr148
  L__FloatToStr149
  L_EEPROM_Write0
  L_EEPROM_Write1
  L_end_EEPROM_Read
  _EEPROM_Read
  L_end_EEPROM_Write
  _EEPROM_Write
  L__EEPROM_Write4
  L__EEPROM_Write5
  L_Div_16x16_S0
  L_Div_16x16_S1
  LOOPS3232A
  SADD22LA
  SOK22LA
  SADD22L8
  SOK22L8
  LOOPS3232B
  SADD22LB
  SOK22LB
  SADD22L16
  SOK22L16
  LOOPS3232C
  SADD22LC
  SOK22LC
  SADD22L24
  SOK22L24
  LOOPS3232D
  SADD22LD
  SOK22LD
  SOK22L
  L_Div_32x32_S6
  L_Div_32x32_S7
  L_Div_32x32_S8
  L_Div_32x32_S9
  FXD3232S
  END_ALL
  CA3232S
  C3232SX
  C3232SX1
  C3232S
  C3232S2
  C3232SX4
  C3232SOK
  C3232SX3
  C3232SX2
  avoid_comfrem
  LOOPU3232A
  UADD22LA
  UOK22LA
  UADD22L8
  UOK22L8
  LOOPU3232B
  UADD22LB
  UOK22LB
  UADD22L16
  UOK22L16
  LOOPU3232C
  UADD22LC
  UOK22LC
  UADD22L24
  UOK22L24
  LOOPU3232D
  UADD22LD
  UOK22LD
  UOK22L
  _NEXT
  _EXIT2
  _LOOP
  _EXIT1
  _IF_FIRST
  _IF_SECOND
  _INVERCE_FIRST
  _MULT
  _INBERSE_SECOND
  _EXIT
  L_end_Mul_8x8_U
  _Mul_8x8_U
  L_end_Mul_16x16_U
  _Mul_16x16_U
  L_end_Div_8x8_U
  _Div_8x8_U
  L_end_Div_16x16_U
  _Div_16x16_U
  L_end_Mul_8x8_S
  _Mul_8x8_S
  L_end_Mul_16x16_S
  _Mul_16x16_S
  L_end_Div_16x16_S_L
  _Div_16x16_S_L
  L_end_Div_16x16_S
  _Div_16x16_S
  L_end_Div_8x8_S
  _Div_8x8_S
  L_end_SDIV3232L
  _SDIV3232L
  L_end_COMFREM
  _COMFREM
  L_end_Div_32x32_S
  _Div_32x32_S
  L_end_Div_32x32_U
  _Div_32x32_U
  L_end_Mul_32x32_U
  _Mul_32x32_U
  L_end_Mul_32x32_S
  _Mul_32x32_S
  L_CA2A_Loop
  L_CA2AW_Loop
  L_CS2S_Loop
  L_CS2S_End
  L_FZinS_Loop
  L_FZinS_End
  _CC2D_Loop1
  _CC2DL_Loop1
  L_end_____DoIFC
  _____DoIFC
  L_end___CA2A
  ___CA2A
  L_end___CA2AW
  ___CA2AW
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___CC2D
  ___CC2D
  L_end___CC2DW
  ___CC2DW
  L_end_Swap
  _Swap
  L_UART1_Init0
  L_UART1_Init1
  L_UART1_Read2
  L_UART1_Write3
  L_UART1_Write4
  L_UART1_Write_Text5
  L_UART1_Write_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Read_Text13
  L_UART1_Read_Text14
  L_UART1_Read_Text15
  L_UART_Write_Text16
  L_UART_Write_Text17
  L_UART_Read_Text18
  L_UART_Read_Text19
  L_UART_Read_Text20
  L_UART_Read_Text21
  L_UART_Read_Text22
  L_UART_Read_Text23
  L_UART_Read_Text24
  L_UART_Read_Text25
  L_UART_Read_Text26
  L_end_UART1_Init
  _UART1_Init
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_set_duty_cycle0
  L_set_duty_cycle1
  L_pwm_steering2
  L_pwm_steering3
  L_pwm_steering4
  L_pwm_steering5
  L_pwm_steering6
  L_pwm_steering7
  L_setup_port8
  L_failSafeCheck9
  L_PulseIn110
  L_PulseIn111
  L_PulseIn112
  L_PulseIn113
  L_PulseIn114
  L_PulseIn115
  L_PulseIn116
  L_PulseIn117
  L_PulseIn118
  L_rotateMotor119
  L_rotateMotor120
  L_interrupt21
  L_interrupt22
  L_interrupt23
  L_interrupt24
  L_interrupt25
  L_interrupt26
  L_interrupt27
  L_interrupt28
  L_interrupt29
  L_interrupt30
  L_interrupt31
  L_error_led_blink32
  L_error_led_blink33
  L_error_led_blink34
  L_error_led_blink35
  L_error_led_blink36
  L_calibration37
  L_calibration38
  L_calibration39
  L_calibration40
  L_calibration41
  L_calibration42
  L_calibration43
  L_calibration44
  L_calibration45
  L_calibration46
  L_calibration47
  L_calibration48
  L_calibration49
  L_calibration50
  L_calibration51
  L_calibration52
  L_read_eeprom_signals_data53
  L_read_eeprom_signals_data54
  L_main55
  L_main56
  L_main57
  L_main58
  L__interrupt59
  L__interrupt60
  L_end_setup_pwms
  _setup_pwms
  L_end_set_duty_cycle
  _set_duty_cycle
  L__set_duty_cycle63
  L__set_duty_cycle64
  L_end_pwm_steering
  _pwm_steering
  L__pwm_steering66
  L__pwm_steering67
  L__pwm_steering68
  L__pwm_steering69
  L__pwm_steering70
  L__pwm_steering71
  L_end_setup_Timer_1
  _setup_Timer_1
  L_end_micros
  _micros
  L_end_setup_port
  _setup_port
  L_end_failSafeCheck
  _failSafeCheck
  L__failSafeCheck76
  L_end_PulseIn1
  _PulseIn1
  L__PulseIn178
  L__PulseIn179
  L__PulseIn180
  L_end_map
  _map
  L_end_rotateMotor1
  _rotateMotor1
  L__rotateMotor183
  L__rotateMotor184
  L_end_interrupt
  _interrupt
  L__interrupt86
  L_end_error_led_blink
  _error_led_blink
  L__error_led_blink88
  L_end_calibration
  _calibration
  L__calibration90
  L__calibration91
  L__calibration92
  L__calibration93
  L__calibration94
  L__calibration95
  L_end_read_eeprom_signals_data
  _read_eeprom_signals_data
  L_end_main
  _main
